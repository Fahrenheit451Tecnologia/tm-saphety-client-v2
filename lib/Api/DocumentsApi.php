<?php
/**
 * DocumentsApi
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocumentsQuery
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TM\Saphety\Clientv2\ApiException;
use TM\Saphety\Clientv2\Configuration;
use TM\Saphety\Clientv2\HeaderSelector;
use TM\Saphety\Clientv2\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation count
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageInt32
     */
    public function count($virtual_operator, $input_dto = null)
    {
        list($response) = $this->countWithHttpInfo($virtual_operator, $input_dto);
        return $response;
    }

    /**
     * Operation countWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageInt32, HTTP status code, HTTP response headers (array of strings)
     */
    public function countWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageInt32';
        $request = $this->countRequest($virtual_operator, $input_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageInt32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageInt32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countAsync($virtual_operator, $input_dto = null)
    {
        return $this->countAsyncWithHttpInfo($virtual_operator, $input_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countAsyncWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageInt32';
        $request = $this->countRequest($virtual_operator, $input_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'count'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countRequest($virtual_operator, $input_dto = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling count'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.count, must be smaller than or equal to 60.');
        }


        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($input_dto)) {
            $_tempBody = $input_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cude
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CudeInputDto $input_dto input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageString
     */
    public function cude($virtual_operator, $input_dto = null)
    {
        list($response) = $this->cudeWithHttpInfo($virtual_operator, $input_dto);
        return $response;
    }

    /**
     * Operation cudeWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CudeInputDto $input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageString, HTTP status code, HTTP response headers (array of strings)
     */
    public function cudeWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageString';
        $request = $this->cudeRequest($virtual_operator, $input_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cudeAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CudeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cudeAsync($virtual_operator, $input_dto = null)
    {
        return $this->cudeAsyncWithHttpInfo($virtual_operator, $input_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cudeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CudeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cudeAsyncWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageString';
        $request = $this->cudeRequest($virtual_operator, $input_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cude'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CudeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cudeRequest($virtual_operator, $input_dto = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling cude'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.cude, must be smaller than or equal to 60.');
        }


        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/cude';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($input_dto)) {
            $_tempBody = $input_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cufe
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CufeInputDto $input_dto input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageString
     */
    public function cufe($virtual_operator, $input_dto = null)
    {
        list($response) = $this->cufeWithHttpInfo($virtual_operator, $input_dto);
        return $response;
    }

    /**
     * Operation cufeWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CufeInputDto $input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageString, HTTP status code, HTTP response headers (array of strings)
     */
    public function cufeWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageString';
        $request = $this->cufeRequest($virtual_operator, $input_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cufeAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CufeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cufeAsync($virtual_operator, $input_dto = null)
    {
        return $this->cufeAsyncWithHttpInfo($virtual_operator, $input_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cufeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CufeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cufeAsyncWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageString';
        $request = $this->cufeRequest($virtual_operator, $input_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cufe'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\CufeInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cufeRequest($virtual_operator, $input_dto = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling cufe'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.cufe, must be smaller than or equal to 60.');
        }


        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/cufe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($input_dto)) {
            $_tempBody = $input_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation details
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto
     */
    public function details($virtual_operator, $document_id)
    {
        list($response) = $this->detailsWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation detailsWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function detailsWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto';
        $request = $this->detailsRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detailsAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailsAsync($virtual_operator, $document_id)
    {
        return $this->detailsAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailsAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentSearchServiceOutputDto';
        $request = $this->detailsRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'details'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function detailsRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling details'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.details, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling details'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachedDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto
     */
    public function getAttachedDocument($virtual_operator, $document_id)
    {
        list($response) = $this->getAttachedDocumentWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getAttachedDocumentWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachedDocumentWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getAttachedDocumentRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachedDocumentAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachedDocumentAsync($virtual_operator, $document_id)
    {
        return $this->getAttachedDocumentAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachedDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachedDocumentAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getAttachedDocumentRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachedDocument'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttachedDocumentRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getAttachedDocument'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getAttachedDocument, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getAttachedDocument'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/attacheddocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachedDocumentContent
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  bool $disposition_inline disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAttachedDocumentContent($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        list($response) = $this->getAttachedDocumentContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation getAttachedDocumentContentWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachedDocumentContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getAttachedDocumentContentRequest($virtual_operator, $document_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachedDocumentContentAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachedDocumentContentAsync($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        return $this->getAttachedDocumentContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachedDocumentContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachedDocumentContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getAttachedDocumentContentRequest($virtual_operator, $document_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachedDocumentContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttachedDocumentContentRequest($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getAttachedDocumentContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getAttachedDocumentContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getAttachedDocumentContent'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/attacheddocument/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachments
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  bool $get_content get_content (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto
     */
    public function getAttachments($virtual_operator, $document_id, $get_content)
    {
        list($response) = $this->getAttachmentsWithHttpInfo($virtual_operator, $document_id, $get_content);
        return $response;
    }

    /**
     * Operation getAttachmentsWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsWithHttpInfo($virtual_operator, $document_id, $get_content)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto';
        $request = $this->getAttachmentsRequest($virtual_operator, $document_id, $get_content);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsAsync($virtual_operator, $document_id, $get_content)
    {
        return $this->getAttachmentsAsyncWithHttpInfo($virtual_operator, $document_id, $get_content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsAsyncWithHttpInfo($virtual_operator, $document_id, $get_content)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentAttachmentOutputDto';
        $request = $this->getAttachmentsRequest($virtual_operator, $document_id, $get_content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachments'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttachmentsRequest($virtual_operator, $document_id, $get_content)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getAttachments'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getAttachments, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getAttachments'
            );
        }
        // verify the required parameter 'get_content' is set
        if ($get_content === null || (is_array($get_content) && count($get_content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_content when calling getAttachments'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($get_content !== null) {
            $resourcePath = str_replace(
                '{' . 'getContent' . '}',
                ObjectSerializer::toPathValue($get_content),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentsById
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  string $attachment_id attachment_id (required)
     * @param  bool $get_content get_content (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto
     */
    public function getAttachmentsById($virtual_operator, $document_id, $attachment_id, $get_content)
    {
        list($response) = $this->getAttachmentsByIdWithHttpInfo($virtual_operator, $document_id, $attachment_id, $get_content);
        return $response;
    }

    /**
     * Operation getAttachmentsByIdWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  string $attachment_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsByIdWithHttpInfo($virtual_operator, $document_id, $attachment_id, $get_content)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto';
        $request = $this->getAttachmentsByIdRequest($virtual_operator, $document_id, $attachment_id, $get_content);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsByIdAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  string $attachment_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsByIdAsync($virtual_operator, $document_id, $attachment_id, $get_content)
    {
        return $this->getAttachmentsByIdAsyncWithHttpInfo($virtual_operator, $document_id, $attachment_id, $get_content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  string $attachment_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsByIdAsyncWithHttpInfo($virtual_operator, $document_id, $attachment_id, $get_content)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentAttachmentOutputDto';
        $request = $this->getAttachmentsByIdRequest($virtual_operator, $document_id, $attachment_id, $get_content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentsById'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  string $attachment_id (required)
     * @param  bool $get_content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttachmentsByIdRequest($virtual_operator, $document_id, $attachment_id, $get_content)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getAttachmentsById'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getAttachmentsById, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getAttachmentsById'
            );
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling getAttachmentsById'
            );
        }
        // verify the required parameter 'get_content' is set
        if ($get_content === null || (is_array($get_content) && count($get_content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_content when calling getAttachmentsById'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($get_content !== null) {
            $resourcePath = str_replace(
                '{' . 'getContent' . '}',
                ObjectSerializer::toPathValue($get_content),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDto
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto
     */
    public function getDto($virtual_operator, $document_id)
    {
        list($response) = $this->getDtoWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getDtoWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDtoWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getDtoRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDtoAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDtoAsync($virtual_operator, $document_id)
    {
        return $this->getDtoAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDtoAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDtoAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getDtoRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDto'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDtoRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getDto'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getDto, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDto'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/dto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDtoContent
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  bool $disposition_inline disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getDtoContent($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        list($response) = $this->getDtoContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation getDtoContentWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDtoContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getDtoContentRequest($virtual_operator, $document_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDtoContentAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDtoContentAsync($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        return $this->getDtoContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDtoContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDtoContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getDtoContentRequest($virtual_operator, $document_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDtoContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDtoContentRequest($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getDtoContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getDtoContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDtoContent'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/dto/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFiles
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto
     */
    public function getFiles($virtual_operator, $document_id)
    {
        list($response) = $this->getFilesWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getFilesWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto';
        $request = $this->getFilesRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFilesAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesAsync($virtual_operator, $document_id)
    {
        return $this->getFilesAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFilesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentFileOutputDto';
        $request = $this->getFilesRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFiles'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFilesRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getFiles'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getFiles, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getFiles'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdf
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto
     */
    public function getPdf($virtual_operator, $document_id)
    {
        list($response) = $this->getPdfWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getPdfWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getPdfRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfAsync($virtual_operator, $document_id)
    {
        return $this->getPdfAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getPdfRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdf'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPdfRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getPdf'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getPdf, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getPdf'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdfContent
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  bool $disposition_inline disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getPdfContent($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        list($response) = $this->getPdfContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation getPdfContentWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getPdfContentRequest($virtual_operator, $document_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfContentAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfContentAsync($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        return $this->getPdfContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getPdfContentRequest($virtual_operator, $document_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPdfContentRequest($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getPdfContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getPdfContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getPdfContent'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/pdf/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatus
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto
     */
    public function getStatus($virtual_operator, $document_id)
    {
        list($response) = $this->getStatusWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getStatusWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto';
        $request = $this->getStatusRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusAsync($virtual_operator, $document_id)
    {
        return $this->getStatusAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListGetStatusOutputDto';
        $request = $this->getStatusRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatus'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getStatus'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getStatus, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getStatus'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUbl
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto
     */
    public function getUbl($virtual_operator, $document_id)
    {
        list($response) = $this->getUblWithHttpInfo($virtual_operator, $document_id);
        return $response;
    }

    /**
     * Operation getUblWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUblWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getUblRequest($virtual_operator, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUblAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUblAsync($virtual_operator, $document_id)
    {
        return $this->getUblAsyncWithHttpInfo($virtual_operator, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUblAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUblAsyncWithHttpInfo($virtual_operator, $document_id)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageDocumentFileOutputDto';
        $request = $this->getUblRequest($virtual_operator, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUbl'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUblRequest($virtual_operator, $document_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getUbl'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getUbl, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getUbl'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/ubl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUblContent
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id document_id (required)
     * @param  bool $disposition_inline disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getUblContent($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        list($response) = $this->getUblContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation getUblContentWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUblContentWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getUblContentRequest($virtual_operator, $document_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUblContentAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUblContentAsync($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        return $this->getUblContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUblContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUblContentAsyncWithHttpInfo($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        $returnType = 'string';
        $request = $this->getUblContentRequest($virtual_operator, $document_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUblContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $document_id (required)
     * @param  bool $disposition_inline (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUblContentRequest($virtual_operator, $document_id, $disposition_inline = 'false')
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling getUblContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.getUblContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getUblContent'
            );
        }

        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/{documentId}/ubl/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto
     */
    public function search($virtual_operator, $input_dto = null)
    {
        list($response) = $this->searchWithHttpInfo($virtual_operator, $input_dto);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \TM\Saphety\Clientv2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto';
        $request = $this->searchRequest($virtual_operator, $input_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($virtual_operator, $input_dto = null)
    {
        return $this->searchAsyncWithHttpInfo($virtual_operator, $input_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($virtual_operator, $input_dto = null)
    {
        $returnType = '\TM\Saphety\Clientv2\Model\ResultMessageListDocumentSearchServiceOutputDto';
        $request = $this->searchRequest($virtual_operator, $input_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \TM\Saphety\Clientv2\Model\DocumentSearchCriteriaInputDto $input_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchRequest($virtual_operator, $input_dto = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null || (is_array($virtual_operator) && count($virtual_operator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling search'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling DocumentsApi.search, must be smaller than or equal to 60.');
        }


        $resourcePath = '/v2/{virtualOperator}/outbounddocuments/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($input_dto)) {
            $_tempBody = $input_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
