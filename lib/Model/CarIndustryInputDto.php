<?php
/**
 * CarIndustryInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocuments
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Model;

use \ArrayAccess;
use \TM\Saphety\Clientv2\ObjectSerializer;

/**
 * CarIndustryInputDto Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarIndustryInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CarIndustryInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'motor_number' => 'string',
        'chassis_number' => 'string',
        'cylinder_capacity' => 'string',
        'serie_number' => 'string',
        'year' => 'int',
        'class' => 'string',
        'color' => 'string',
        'manifest' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'motor_number' => null,
        'chassis_number' => null,
        'cylinder_capacity' => null,
        'serie_number' => null,
        'year' => 'int32',
        'class' => null,
        'color' => null,
        'manifest' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'motor_number' => 'MotorNumber',
        'chassis_number' => 'ChassisNumber',
        'cylinder_capacity' => 'CylinderCapacity',
        'serie_number' => 'SerieNumber',
        'year' => 'Year',
        'class' => 'Class',
        'color' => 'Color',
        'manifest' => 'Manifest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'motor_number' => 'setMotorNumber',
        'chassis_number' => 'setChassisNumber',
        'cylinder_capacity' => 'setCylinderCapacity',
        'serie_number' => 'setSerieNumber',
        'year' => 'setYear',
        'class' => 'setClass',
        'color' => 'setColor',
        'manifest' => 'setManifest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'motor_number' => 'getMotorNumber',
        'chassis_number' => 'getChassisNumber',
        'cylinder_capacity' => 'getCylinderCapacity',
        'serie_number' => 'getSerieNumber',
        'year' => 'getYear',
        'class' => 'getClass',
        'color' => 'getColor',
        'manifest' => 'getManifest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['motor_number'] = isset($data['motor_number']) ? $data['motor_number'] : null;
        $this->container['chassis_number'] = isset($data['chassis_number']) ? $data['chassis_number'] : null;
        $this->container['cylinder_capacity'] = isset($data['cylinder_capacity']) ? $data['cylinder_capacity'] : null;
        $this->container['serie_number'] = isset($data['serie_number']) ? $data['serie_number'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['manifest'] = isset($data['manifest']) ? $data['manifest'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['motor_number']) && (mb_strlen($this->container['motor_number']) < 50)) {
            $invalidProperties[] = "invalid value for 'motor_number', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['chassis_number']) && (mb_strlen($this->container['chassis_number']) < 50)) {
            $invalidProperties[] = "invalid value for 'chassis_number', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['cylinder_capacity']) && (mb_strlen($this->container['cylinder_capacity']) < 50)) {
            $invalidProperties[] = "invalid value for 'cylinder_capacity', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['serie_number']) && (mb_strlen($this->container['serie_number']) < 50)) {
            $invalidProperties[] = "invalid value for 'serie_number', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['class']) && (mb_strlen($this->container['class']) < 50)) {
            $invalidProperties[] = "invalid value for 'class', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) < 50)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['manifest']) && (mb_strlen($this->container['manifest']) < 100)) {
            $invalidProperties[] = "invalid value for 'manifest', the character length must be bigger than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets motor_number
     *
     * @return string
     */
    public function getMotorNumber()
    {
        return $this->container['motor_number'];
    }

    /**
     * Sets motor_number
     *
     * @param string $motor_number MinLength: 50
     *
     * @return $this
     */
    public function setMotorNumber($motor_number)
    {

        if (!is_null($motor_number) && (mb_strlen($motor_number) < 50)) {
            throw new \InvalidArgumentException('invalid length for $motor_number when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['motor_number'] = $motor_number;

        return $this;
    }

    /**
     * Gets chassis_number
     *
     * @return string
     */
    public function getChassisNumber()
    {
        return $this->container['chassis_number'];
    }

    /**
     * Sets chassis_number
     *
     * @param string $chassis_number MinLength: 50
     *
     * @return $this
     */
    public function setChassisNumber($chassis_number)
    {

        if (!is_null($chassis_number) && (mb_strlen($chassis_number) < 50)) {
            throw new \InvalidArgumentException('invalid length for $chassis_number when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['chassis_number'] = $chassis_number;

        return $this;
    }

    /**
     * Gets cylinder_capacity
     *
     * @return string
     */
    public function getCylinderCapacity()
    {
        return $this->container['cylinder_capacity'];
    }

    /**
     * Sets cylinder_capacity
     *
     * @param string $cylinder_capacity MinLength: 50
     *
     * @return $this
     */
    public function setCylinderCapacity($cylinder_capacity)
    {

        if (!is_null($cylinder_capacity) && (mb_strlen($cylinder_capacity) < 50)) {
            throw new \InvalidArgumentException('invalid length for $cylinder_capacity when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['cylinder_capacity'] = $cylinder_capacity;

        return $this;
    }

    /**
     * Gets serie_number
     *
     * @return string
     */
    public function getSerieNumber()
    {
        return $this->container['serie_number'];
    }

    /**
     * Sets serie_number
     *
     * @param string $serie_number MinLength: 50
     *
     * @return $this
     */
    public function setSerieNumber($serie_number)
    {

        if (!is_null($serie_number) && (mb_strlen($serie_number) < 50)) {
            throw new \InvalidArgumentException('invalid length for $serie_number when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['serie_number'] = $serie_number;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class MinLength: 50
     *
     * @return $this
     */
    public function setClass($class)
    {

        if (!is_null($class) && (mb_strlen($class) < 50)) {
            throw new \InvalidArgumentException('invalid length for $class when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color MinLength: 50
     *
     * @return $this
     */
    public function setColor($color)
    {

        if (!is_null($color) && (mb_strlen($color) < 50)) {
            throw new \InvalidArgumentException('invalid length for $color when calling CarIndustryInputDto., must be bigger than or equal to 50.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets manifest
     *
     * @return string
     */
    public function getManifest()
    {
        return $this->container['manifest'];
    }

    /**
     * Sets manifest
     *
     * @param string $manifest MinLength: 100
     *
     * @return $this
     */
    public function setManifest($manifest)
    {

        if (!is_null($manifest) && (mb_strlen($manifest) < 100)) {
            throw new \InvalidArgumentException('invalid length for $manifest when calling CarIndustryInputDto., must be bigger than or equal to 100.');
        }

        $this->container['manifest'] = $manifest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


