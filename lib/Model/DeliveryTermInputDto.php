<?php
/**
 * DeliveryTermInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocuments
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Model;

use \ArrayAccess;
use \TM\Saphety\Clientv2\ObjectSerializer;

/**
 * DeliveryTermInputDto Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryTermInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryTermInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'special_terms' => 'string',
        'incoterm_code' => 'string',
        'delivery_code' => 'string',
        'delivery_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'special_terms' => null,
        'incoterm_code' => null,
        'delivery_code' => null,
        'delivery_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'special_terms' => 'SpecialTerms',
        'incoterm_code' => 'IncotermCode',
        'delivery_code' => 'DeliveryCode',
        'delivery_description' => 'DeliveryDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'special_terms' => 'setSpecialTerms',
        'incoterm_code' => 'setIncotermCode',
        'delivery_code' => 'setDeliveryCode',
        'delivery_description' => 'setDeliveryDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'special_terms' => 'getSpecialTerms',
        'incoterm_code' => 'getIncotermCode',
        'delivery_code' => 'getDeliveryCode',
        'delivery_description' => 'getDeliveryDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['special_terms'] = isset($data['special_terms']) ? $data['special_terms'] : null;
        $this->container['incoterm_code'] = isset($data['incoterm_code']) ? $data['incoterm_code'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['delivery_description'] = isset($data['delivery_description']) ? $data['delivery_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['special_terms']) && (mb_strlen($this->container['special_terms']) > 200)) {
            $invalidProperties[] = "invalid value for 'special_terms', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['incoterm_code']) && (mb_strlen($this->container['incoterm_code']) > 200)) {
            $invalidProperties[] = "invalid value for 'incoterm_code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['delivery_code']) && (mb_strlen($this->container['delivery_code']) > 200)) {
            $invalidProperties[] = "invalid value for 'delivery_code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['delivery_description']) && (mb_strlen($this->container['delivery_description']) > 200)) {
            $invalidProperties[] = "invalid value for 'delivery_description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets special_terms
     *
     * @return string
     */
    public function getSpecialTerms()
    {
        return $this->container['special_terms'];
    }

    /**
     * Sets special_terms
     *
     * @param string $special_terms MaxLength: 200
     *
     * @return $this
     */
    public function setSpecialTerms($special_terms)
    {
        if (!is_null($special_terms) && (mb_strlen($special_terms) > 200)) {
            throw new \InvalidArgumentException('invalid length for $special_terms when calling DeliveryTermInputDto., must be smaller than or equal to 200.');
        }

        $this->container['special_terms'] = $special_terms;

        return $this;
    }

    /**
     * Gets incoterm_code
     *
     * @return string
     */
    public function getIncotermCode()
    {
        return $this->container['incoterm_code'];
    }

    /**
     * Sets incoterm_code
     *
     * @param string $incoterm_code MaxLength: 200
     *
     * @return $this
     */
    public function setIncotermCode($incoterm_code)
    {
        if (!is_null($incoterm_code) && (mb_strlen($incoterm_code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $incoterm_code when calling DeliveryTermInputDto., must be smaller than or equal to 200.');
        }

        $this->container['incoterm_code'] = $incoterm_code;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code MaxLength: 200
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        if (!is_null($delivery_code) && (mb_strlen($delivery_code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $delivery_code when calling DeliveryTermInputDto., must be smaller than or equal to 200.');
        }

        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets delivery_description
     *
     * @return string
     */
    public function getDeliveryDescription()
    {
        return $this->container['delivery_description'];
    }

    /**
     * Sets delivery_description
     *
     * @param string $delivery_description MaxLength: 200
     *
     * @return $this
     */
    public function setDeliveryDescription($delivery_description)
    {
        if (!is_null($delivery_description) && (mb_strlen($delivery_description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $delivery_description when calling DeliveryTermInputDto., must be smaller than or equal to 200.');
        }

        $this->container['delivery_description'] = $delivery_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


