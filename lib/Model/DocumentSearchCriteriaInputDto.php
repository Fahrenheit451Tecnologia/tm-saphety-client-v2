<?php
/**
 * DocumentSearchCriteriaInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocumentsQuery
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentSearchCriteriaInputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSearchCriteriaInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentSearchCriteriaInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_number' => 'string',
        'currency' => 'string',
        'company_ids' => 'string[]',
        'virtual_operator_ids' => 'string[]',
        'suppliers' => 'string[]',
        'customers' => 'string[]',
        'document_types' => 'string[]',
        'document_sub_types' => 'string[]',
        'document_status' => 'string[]',
        'communication_status' => 'string[]',
        'main_email_notification_status' => 'string[]',
        'creation_date_start' => '\DateTime',
        'creation_date_end' => '\DateTime',
        'document_date_start' => '\DateTime',
        'document_date_end' => '\DateTime',
        'offset' => 'int',
        'number_of_records' => 'int',
        'sort_field' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_number' => null,
        'currency' => null,
        'company_ids' => 'uuid',
        'virtual_operator_ids' => 'uuid',
        'suppliers' => 'uuid',
        'customers' => 'uuid',
        'document_types' => null,
        'document_sub_types' => null,
        'document_status' => null,
        'communication_status' => null,
        'main_email_notification_status' => null,
        'creation_date_start' => 'date-time',
        'creation_date_end' => 'date-time',
        'document_date_start' => 'date-time',
        'document_date_end' => 'date-time',
        'offset' => 'int32',
        'number_of_records' => 'int32',
        'sort_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_number' => 'DocumentNumber',
        'currency' => 'Currency',
        'company_ids' => 'CompanyIds',
        'virtual_operator_ids' => 'VirtualOperatorIds',
        'suppliers' => 'Suppliers',
        'customers' => 'Customers',
        'document_types' => 'DocumentTypes',
        'document_sub_types' => 'DocumentSubTypes',
        'document_status' => 'DocumentStatus',
        'communication_status' => 'CommunicationStatus',
        'main_email_notification_status' => 'MainEmailNotificationStatus',
        'creation_date_start' => 'CreationDateStart',
        'creation_date_end' => 'CreationDateEnd',
        'document_date_start' => 'DocumentDateStart',
        'document_date_end' => 'DocumentDateEnd',
        'offset' => 'Offset',
        'number_of_records' => 'NumberOfRecords',
        'sort_field' => 'SortField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_number' => 'setDocumentNumber',
        'currency' => 'setCurrency',
        'company_ids' => 'setCompanyIds',
        'virtual_operator_ids' => 'setVirtualOperatorIds',
        'suppliers' => 'setSuppliers',
        'customers' => 'setCustomers',
        'document_types' => 'setDocumentTypes',
        'document_sub_types' => 'setDocumentSubTypes',
        'document_status' => 'setDocumentStatus',
        'communication_status' => 'setCommunicationStatus',
        'main_email_notification_status' => 'setMainEmailNotificationStatus',
        'creation_date_start' => 'setCreationDateStart',
        'creation_date_end' => 'setCreationDateEnd',
        'document_date_start' => 'setDocumentDateStart',
        'document_date_end' => 'setDocumentDateEnd',
        'offset' => 'setOffset',
        'number_of_records' => 'setNumberOfRecords',
        'sort_field' => 'setSortField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_number' => 'getDocumentNumber',
        'currency' => 'getCurrency',
        'company_ids' => 'getCompanyIds',
        'virtual_operator_ids' => 'getVirtualOperatorIds',
        'suppliers' => 'getSuppliers',
        'customers' => 'getCustomers',
        'document_types' => 'getDocumentTypes',
        'document_sub_types' => 'getDocumentSubTypes',
        'document_status' => 'getDocumentStatus',
        'communication_status' => 'getCommunicationStatus',
        'main_email_notification_status' => 'getMainEmailNotificationStatus',
        'creation_date_start' => 'getCreationDateStart',
        'creation_date_end' => 'getCreationDateEnd',
        'document_date_start' => 'getDocumentDateStart',
        'document_date_end' => 'getDocumentDateEnd',
        'offset' => 'getOffset',
        'number_of_records' => 'getNumberOfRecords',
        'sort_field' => 'getSortField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPES_SALES_INVOICE = 'SalesInvoice';
    const DOCUMENT_TYPES_CREDIT_NOTE = 'CreditNote';
    const DOCUMENT_TYPES_DEBIT_NOTE = 'DebitNote';
    const DOCUMENT_STATUS_CERTIFIED = 'Certified';
    const DOCUMENT_STATUS_RECEIVED = 'Received';
    const DOCUMENT_STATUS_REJECTED = 'Rejected';
    const DOCUMENT_STATUS_ACCEPTED = 'Accepted';
    const DOCUMENT_STATUS_VALIDATION_ERROR = 'ValidationError';
    const COMMUNICATION_STATUS_NOT_COMMUNICATED = 'NotCommunicated';
    const COMMUNICATION_STATUS_DELIVER_OK = 'DeliverOk';
    const COMMUNICATION_STATUS_WITH_ERRORS = 'WithErrors';
    const COMMUNICATION_STATUS_COMMUNICATION_ERROR = 'CommunicationError';
    const COMMUNICATION_STATUS_UNABLE_TO_DELIVER = 'UnableToDeliver';
    const COMMUNICATION_STATUS_RETRY_SEND = 'RetrySend';
    const COMMUNICATION_STATUS_IN_VALIDATION = 'InValidation';
    const COMMUNICATION_STATUS_VALIDATION_ERROR = 'ValidationError';
    const COMMUNICATION_STATUS_VALIDATION_OK = 'ValidationOk';
    const COMMUNICATION_STATUS_VALIDATION_FAILURE = 'ValidationFailure';
    const COMMUNICATION_STATUS_SENDING = 'Sending';
    const COMMUNICATION_STATUS_PENDING_RETRY = 'PendingRetry';
    const COMMUNICATION_STATUS_VALIDATION_INFORMATION_NOT_FOUND = 'ValidationInformationNotFound';
    const MAIN_EMAIL_NOTIFICATION_STATUS_NOT_SENT = 'NotSent';
    const MAIN_EMAIL_NOTIFICATION_STATUS_SENT = 'Sent';
    const MAIN_EMAIL_NOTIFICATION_STATUS_DELIVERED = 'Delivered';
    const MAIN_EMAIL_NOTIFICATION_STATUS_BOUNCE = 'Bounce';
    const MAIN_EMAIL_NOTIFICATION_STATUS_DEFERRED = 'Deferred';
    const MAIN_EMAIL_NOTIFICATION_STATUS_DROPPED = 'Dropped';
    const MAIN_EMAIL_NOTIFICATION_STATUS_OPEN = 'Open';
    const MAIN_EMAIL_NOTIFICATION_STATUS_UNKNOWN = 'Unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypesAllowableValues()
    {
        return [
            self::DOCUMENT_TYPES_SALES_INVOICE,
            self::DOCUMENT_TYPES_CREDIT_NOTE,
            self::DOCUMENT_TYPES_DEBIT_NOTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentStatusAllowableValues()
    {
        return [
            self::DOCUMENT_STATUS_CERTIFIED,
            self::DOCUMENT_STATUS_RECEIVED,
            self::DOCUMENT_STATUS_REJECTED,
            self::DOCUMENT_STATUS_ACCEPTED,
            self::DOCUMENT_STATUS_VALIDATION_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommunicationStatusAllowableValues()
    {
        return [
            self::COMMUNICATION_STATUS_NOT_COMMUNICATED,
            self::COMMUNICATION_STATUS_DELIVER_OK,
            self::COMMUNICATION_STATUS_WITH_ERRORS,
            self::COMMUNICATION_STATUS_COMMUNICATION_ERROR,
            self::COMMUNICATION_STATUS_UNABLE_TO_DELIVER,
            self::COMMUNICATION_STATUS_RETRY_SEND,
            self::COMMUNICATION_STATUS_IN_VALIDATION,
            self::COMMUNICATION_STATUS_VALIDATION_ERROR,
            self::COMMUNICATION_STATUS_VALIDATION_OK,
            self::COMMUNICATION_STATUS_VALIDATION_FAILURE,
            self::COMMUNICATION_STATUS_SENDING,
            self::COMMUNICATION_STATUS_PENDING_RETRY,
            self::COMMUNICATION_STATUS_VALIDATION_INFORMATION_NOT_FOUND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMainEmailNotificationStatusAllowableValues()
    {
        return [
            self::MAIN_EMAIL_NOTIFICATION_STATUS_NOT_SENT,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_SENT,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_DELIVERED,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_BOUNCE,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_DEFERRED,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_DROPPED,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_OPEN,
            self::MAIN_EMAIL_NOTIFICATION_STATUS_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['company_ids'] = isset($data['company_ids']) ? $data['company_ids'] : null;
        $this->container['virtual_operator_ids'] = isset($data['virtual_operator_ids']) ? $data['virtual_operator_ids'] : null;
        $this->container['suppliers'] = isset($data['suppliers']) ? $data['suppliers'] : null;
        $this->container['customers'] = isset($data['customers']) ? $data['customers'] : null;
        $this->container['document_types'] = isset($data['document_types']) ? $data['document_types'] : null;
        $this->container['document_sub_types'] = isset($data['document_sub_types']) ? $data['document_sub_types'] : null;
        $this->container['document_status'] = isset($data['document_status']) ? $data['document_status'] : null;
        $this->container['communication_status'] = isset($data['communication_status']) ? $data['communication_status'] : null;
        $this->container['main_email_notification_status'] = isset($data['main_email_notification_status']) ? $data['main_email_notification_status'] : null;
        $this->container['creation_date_start'] = isset($data['creation_date_start']) ? $data['creation_date_start'] : null;
        $this->container['creation_date_end'] = isset($data['creation_date_end']) ? $data['creation_date_end'] : null;
        $this->container['document_date_start'] = isset($data['document_date_start']) ? $data['document_date_start'] : null;
        $this->container['document_date_end'] = isset($data['document_date_end']) ? $data['document_date_end'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['number_of_records'] = isset($data['number_of_records']) ? $data['number_of_records'] : null;
        $this->container['sort_field'] = isset($data['sort_field']) ? $data['sort_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['document_number']) && (mb_strlen($this->container['document_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'document_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 50)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number MaxLength: 20
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        if (!is_null($document_number) && (mb_strlen($document_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $document_number when calling DocumentSearchCriteriaInputDto., must be smaller than or equal to 20.');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency MaxLength: 50
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (mb_strlen($currency) > 50)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling DocumentSearchCriteriaInputDto., must be smaller than or equal to 50.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets company_ids
     *
     * @return string[]
     */
    public function getCompanyIds()
    {
        return $this->container['company_ids'];
    }

    /**
     * Sets company_ids
     *
     * @param string[] $company_ids company_ids
     *
     * @return $this
     */
    public function setCompanyIds($company_ids)
    {
        $this->container['company_ids'] = $company_ids;

        return $this;
    }

    /**
     * Gets virtual_operator_ids
     *
     * @return string[]
     */
    public function getVirtualOperatorIds()
    {
        return $this->container['virtual_operator_ids'];
    }

    /**
     * Sets virtual_operator_ids
     *
     * @param string[] $virtual_operator_ids virtual_operator_ids
     *
     * @return $this
     */
    public function setVirtualOperatorIds($virtual_operator_ids)
    {
        $this->container['virtual_operator_ids'] = $virtual_operator_ids;

        return $this;
    }

    /**
     * Gets suppliers
     *
     * @return string[]
     */
    public function getSuppliers()
    {
        return $this->container['suppliers'];
    }

    /**
     * Sets suppliers
     *
     * @param string[] $suppliers suppliers
     *
     * @return $this
     */
    public function setSuppliers($suppliers)
    {
        $this->container['suppliers'] = $suppliers;

        return $this;
    }

    /**
     * Gets customers
     *
     * @return string[]
     */
    public function getCustomers()
    {
        return $this->container['customers'];
    }

    /**
     * Sets customers
     *
     * @param string[] $customers customers
     *
     * @return $this
     */
    public function setCustomers($customers)
    {
        $this->container['customers'] = $customers;

        return $this;
    }

    /**
     * Gets document_types
     *
     * @return string[]
     */
    public function getDocumentTypes()
    {
        return $this->container['document_types'];
    }

    /**
     * Sets document_types
     *
     * @param string[] $document_types document_types
     *
     * @return $this
     */
    public function setDocumentTypes($document_types)
    {
        $allowedValues = $this->getDocumentTypesAllowableValues();
        if (!is_null($document_types) && array_diff($document_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_types'] = $document_types;

        return $this;
    }

    /**
     * Gets document_sub_types
     *
     * @return string[]
     */
    public function getDocumentSubTypes()
    {
        return $this->container['document_sub_types'];
    }

    /**
     * Sets document_sub_types
     *
     * @param string[] $document_sub_types document_sub_types
     *
     * @return $this
     */
    public function setDocumentSubTypes($document_sub_types)
    {
        $this->container['document_sub_types'] = $document_sub_types;

        return $this;
    }

    /**
     * Gets document_status
     *
     * @return string[]
     */
    public function getDocumentStatus()
    {
        return $this->container['document_status'];
    }

    /**
     * Sets document_status
     *
     * @param string[] $document_status document_status
     *
     * @return $this
     */
    public function setDocumentStatus($document_status)
    {
        $allowedValues = $this->getDocumentStatusAllowableValues();
        if (!is_null($document_status) && array_diff($document_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_status'] = $document_status;

        return $this;
    }

    /**
     * Gets communication_status
     *
     * @return string[]
     */
    public function getCommunicationStatus()
    {
        return $this->container['communication_status'];
    }

    /**
     * Sets communication_status
     *
     * @param string[] $communication_status communication_status
     *
     * @return $this
     */
    public function setCommunicationStatus($communication_status)
    {
        $allowedValues = $this->getCommunicationStatusAllowableValues();
        if (!is_null($communication_status) && array_diff($communication_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'communication_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['communication_status'] = $communication_status;

        return $this;
    }

    /**
     * Gets main_email_notification_status
     *
     * @return string[]
     */
    public function getMainEmailNotificationStatus()
    {
        return $this->container['main_email_notification_status'];
    }

    /**
     * Sets main_email_notification_status
     *
     * @param string[] $main_email_notification_status main_email_notification_status
     *
     * @return $this
     */
    public function setMainEmailNotificationStatus($main_email_notification_status)
    {
        $allowedValues = $this->getMainEmailNotificationStatusAllowableValues();
        if (!is_null($main_email_notification_status) && array_diff($main_email_notification_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'main_email_notification_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['main_email_notification_status'] = $main_email_notification_status;

        return $this;
    }

    /**
     * Gets creation_date_start
     *
     * @return \DateTime
     */
    public function getCreationDateStart()
    {
        return $this->container['creation_date_start'];
    }

    /**
     * Sets creation_date_start
     *
     * @param \DateTime $creation_date_start creation_date_start
     *
     * @return $this
     */
    public function setCreationDateStart($creation_date_start)
    {
        $this->container['creation_date_start'] = $creation_date_start;

        return $this;
    }

    /**
     * Gets creation_date_end
     *
     * @return \DateTime
     */
    public function getCreationDateEnd()
    {
        return $this->container['creation_date_end'];
    }

    /**
     * Sets creation_date_end
     *
     * @param \DateTime $creation_date_end creation_date_end
     *
     * @return $this
     */
    public function setCreationDateEnd($creation_date_end)
    {
        $this->container['creation_date_end'] = $creation_date_end;

        return $this;
    }

    /**
     * Gets document_date_start
     *
     * @return \DateTime
     */
    public function getDocumentDateStart()
    {
        return $this->container['document_date_start'];
    }

    /**
     * Sets document_date_start
     *
     * @param \DateTime $document_date_start document_date_start
     *
     * @return $this
     */
    public function setDocumentDateStart($document_date_start)
    {
        $this->container['document_date_start'] = $document_date_start;

        return $this;
    }

    /**
     * Gets document_date_end
     *
     * @return \DateTime
     */
    public function getDocumentDateEnd()
    {
        return $this->container['document_date_end'];
    }

    /**
     * Sets document_date_end
     *
     * @param \DateTime $document_date_end document_date_end
     *
     * @return $this
     */
    public function setDocumentDateEnd($document_date_end)
    {
        $this->container['document_date_end'] = $document_date_end;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets number_of_records
     *
     * @return int
     */
    public function getNumberOfRecords()
    {
        return $this->container['number_of_records'];
    }

    /**
     * Sets number_of_records
     *
     * @param int $number_of_records number_of_records
     *
     * @return $this
     */
    public function setNumberOfRecords($number_of_records)
    {
        $this->container['number_of_records'] = $number_of_records;

        return $this;
    }

    /**
     * Gets sort_field
     *
     * @return string
     */
    public function getSortField()
    {
        return $this->container['sort_field'];
    }

    /**
     * Sets sort_field
     *
     * @param string $sort_field sort_field
     *
     * @return $this
     */
    public function setSortField($sort_field)
    {
        $this->container['sort_field'] = $sort_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


