<?php
/**
 * DocumentSearchServiceOutputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocumentsQuery
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentSearchServiceOutputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSearchServiceOutputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentSearchServiceOutputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'document_type' => 'string',
        'document_sub_type' => 'string',
        'document_number' => 'string',
        'origin_id' => 'string',
        'origin_name' => 'string',
        'origin_code' => 'string',
        'destination_id' => 'string',
        'destination_name' => 'string',
        'destination_code' => 'string',
        'document_date' => '\DateTime',
        'creation_date' => '\DateTime',
        'document_status' => 'string',
        'document_status_date' => '\DateTime',
        'communication_status' => 'string',
        'communication_status_comments' => 'string',
        'main_email_notification' => 'string',
        'main_email_notification_status' => 'string',
        'main_email_notification_status_reason' => 'string',
        'currency' => 'string',
        'total_amount' => 'double',
        'cufe' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'document_type' => null,
        'document_sub_type' => null,
        'document_number' => null,
        'origin_id' => null,
        'origin_name' => null,
        'origin_code' => null,
        'destination_id' => null,
        'destination_name' => null,
        'destination_code' => null,
        'document_date' => 'date-time',
        'creation_date' => 'date-time',
        'document_status' => null,
        'document_status_date' => 'date-time',
        'communication_status' => null,
        'communication_status_comments' => null,
        'main_email_notification' => null,
        'main_email_notification_status' => null,
        'main_email_notification_status_reason' => null,
        'currency' => null,
        'total_amount' => 'double',
        'cufe' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'document_type' => 'DocumentType',
        'document_sub_type' => 'DocumentSubType',
        'document_number' => 'DocumentNumber',
        'origin_id' => 'OriginId',
        'origin_name' => 'OriginName',
        'origin_code' => 'OriginCode',
        'destination_id' => 'DestinationId',
        'destination_name' => 'DestinationName',
        'destination_code' => 'DestinationCode',
        'document_date' => 'DocumentDate',
        'creation_date' => 'CreationDate',
        'document_status' => 'DocumentStatus',
        'document_status_date' => 'DocumentStatusDate',
        'communication_status' => 'CommunicationStatus',
        'communication_status_comments' => 'CommunicationStatusComments',
        'main_email_notification' => 'MainEmailNotification',
        'main_email_notification_status' => 'MainEmailNotificationStatus',
        'main_email_notification_status_reason' => 'MainEmailNotificationStatusReason',
        'currency' => 'Currency',
        'total_amount' => 'TotalAmount',
        'cufe' => 'Cufe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'document_type' => 'setDocumentType',
        'document_sub_type' => 'setDocumentSubType',
        'document_number' => 'setDocumentNumber',
        'origin_id' => 'setOriginId',
        'origin_name' => 'setOriginName',
        'origin_code' => 'setOriginCode',
        'destination_id' => 'setDestinationId',
        'destination_name' => 'setDestinationName',
        'destination_code' => 'setDestinationCode',
        'document_date' => 'setDocumentDate',
        'creation_date' => 'setCreationDate',
        'document_status' => 'setDocumentStatus',
        'document_status_date' => 'setDocumentStatusDate',
        'communication_status' => 'setCommunicationStatus',
        'communication_status_comments' => 'setCommunicationStatusComments',
        'main_email_notification' => 'setMainEmailNotification',
        'main_email_notification_status' => 'setMainEmailNotificationStatus',
        'main_email_notification_status_reason' => 'setMainEmailNotificationStatusReason',
        'currency' => 'setCurrency',
        'total_amount' => 'setTotalAmount',
        'cufe' => 'setCufe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'document_type' => 'getDocumentType',
        'document_sub_type' => 'getDocumentSubType',
        'document_number' => 'getDocumentNumber',
        'origin_id' => 'getOriginId',
        'origin_name' => 'getOriginName',
        'origin_code' => 'getOriginCode',
        'destination_id' => 'getDestinationId',
        'destination_name' => 'getDestinationName',
        'destination_code' => 'getDestinationCode',
        'document_date' => 'getDocumentDate',
        'creation_date' => 'getCreationDate',
        'document_status' => 'getDocumentStatus',
        'document_status_date' => 'getDocumentStatusDate',
        'communication_status' => 'getCommunicationStatus',
        'communication_status_comments' => 'getCommunicationStatusComments',
        'main_email_notification' => 'getMainEmailNotification',
        'main_email_notification_status' => 'getMainEmailNotificationStatus',
        'main_email_notification_status_reason' => 'getMainEmailNotificationStatusReason',
        'currency' => 'getCurrency',
        'total_amount' => 'getTotalAmount',
        'cufe' => 'getCufe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_sub_type'] = isset($data['document_sub_type']) ? $data['document_sub_type'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['origin_id'] = isset($data['origin_id']) ? $data['origin_id'] : null;
        $this->container['origin_name'] = isset($data['origin_name']) ? $data['origin_name'] : null;
        $this->container['origin_code'] = isset($data['origin_code']) ? $data['origin_code'] : null;
        $this->container['destination_id'] = isset($data['destination_id']) ? $data['destination_id'] : null;
        $this->container['destination_name'] = isset($data['destination_name']) ? $data['destination_name'] : null;
        $this->container['destination_code'] = isset($data['destination_code']) ? $data['destination_code'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['document_status'] = isset($data['document_status']) ? $data['document_status'] : null;
        $this->container['document_status_date'] = isset($data['document_status_date']) ? $data['document_status_date'] : null;
        $this->container['communication_status'] = isset($data['communication_status']) ? $data['communication_status'] : null;
        $this->container['communication_status_comments'] = isset($data['communication_status_comments']) ? $data['communication_status_comments'] : null;
        $this->container['main_email_notification'] = isset($data['main_email_notification']) ? $data['main_email_notification'] : null;
        $this->container['main_email_notification_status'] = isset($data['main_email_notification_status']) ? $data['main_email_notification_status'] : null;
        $this->container['main_email_notification_status_reason'] = isset($data['main_email_notification_status_reason']) ? $data['main_email_notification_status_reason'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['cufe'] = isset($data['cufe']) ? $data['cufe'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_sub_type
     *
     * @return string
     */
    public function getDocumentSubType()
    {
        return $this->container['document_sub_type'];
    }

    /**
     * Sets document_sub_type
     *
     * @param string $document_sub_type document_sub_type
     *
     * @return $this
     */
    public function setDocumentSubType($document_sub_type)
    {
        $this->container['document_sub_type'] = $document_sub_type;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number document_number
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string
     */
    public function getOriginId()
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string $origin_id origin_id
     *
     * @return $this
     */
    public function setOriginId($origin_id)
    {
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets origin_name
     *
     * @return string
     */
    public function getOriginName()
    {
        return $this->container['origin_name'];
    }

    /**
     * Sets origin_name
     *
     * @param string $origin_name origin_name
     *
     * @return $this
     */
    public function setOriginName($origin_name)
    {
        $this->container['origin_name'] = $origin_name;

        return $this;
    }

    /**
     * Gets origin_code
     *
     * @return string
     */
    public function getOriginCode()
    {
        return $this->container['origin_code'];
    }

    /**
     * Sets origin_code
     *
     * @param string $origin_code origin_code
     *
     * @return $this
     */
    public function setOriginCode($origin_code)
    {
        $this->container['origin_code'] = $origin_code;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return string
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param string $destination_id destination_id
     *
     * @return $this
     */
    public function setDestinationId($destination_id)
    {
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets destination_name
     *
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     *
     * @param string $destination_name destination_name
     *
     * @return $this
     */
    public function setDestinationName($destination_name)
    {
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets destination_code
     *
     * @return string
     */
    public function getDestinationCode()
    {
        return $this->container['destination_code'];
    }

    /**
     * Sets destination_code
     *
     * @param string $destination_code destination_code
     *
     * @return $this
     */
    public function setDestinationCode($destination_code)
    {
        $this->container['destination_code'] = $destination_code;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets document_status
     *
     * @return string
     */
    public function getDocumentStatus()
    {
        return $this->container['document_status'];
    }

    /**
     * Sets document_status
     *
     * @param string $document_status document_status
     *
     * @return $this
     */
    public function setDocumentStatus($document_status)
    {
        $this->container['document_status'] = $document_status;

        return $this;
    }

    /**
     * Gets document_status_date
     *
     * @return \DateTime
     */
    public function getDocumentStatusDate()
    {
        return $this->container['document_status_date'];
    }

    /**
     * Sets document_status_date
     *
     * @param \DateTime $document_status_date document_status_date
     *
     * @return $this
     */
    public function setDocumentStatusDate($document_status_date)
    {
        $this->container['document_status_date'] = $document_status_date;

        return $this;
    }

    /**
     * Gets communication_status
     *
     * @return string
     */
    public function getCommunicationStatus()
    {
        return $this->container['communication_status'];
    }

    /**
     * Sets communication_status
     *
     * @param string $communication_status communication_status
     *
     * @return $this
     */
    public function setCommunicationStatus($communication_status)
    {
        $this->container['communication_status'] = $communication_status;

        return $this;
    }

    /**
     * Gets communication_status_comments
     *
     * @return string
     */
    public function getCommunicationStatusComments()
    {
        return $this->container['communication_status_comments'];
    }

    /**
     * Sets communication_status_comments
     *
     * @param string $communication_status_comments communication_status_comments
     *
     * @return $this
     */
    public function setCommunicationStatusComments($communication_status_comments)
    {
        $this->container['communication_status_comments'] = $communication_status_comments;

        return $this;
    }

    /**
     * Gets main_email_notification
     *
     * @return string
     */
    public function getMainEmailNotification()
    {
        return $this->container['main_email_notification'];
    }

    /**
     * Sets main_email_notification
     *
     * @param string $main_email_notification main_email_notification
     *
     * @return $this
     */
    public function setMainEmailNotification($main_email_notification)
    {
        $this->container['main_email_notification'] = $main_email_notification;

        return $this;
    }

    /**
     * Gets main_email_notification_status
     *
     * @return string
     */
    public function getMainEmailNotificationStatus()
    {
        return $this->container['main_email_notification_status'];
    }

    /**
     * Sets main_email_notification_status
     *
     * @param string $main_email_notification_status main_email_notification_status
     *
     * @return $this
     */
    public function setMainEmailNotificationStatus($main_email_notification_status)
    {
        $this->container['main_email_notification_status'] = $main_email_notification_status;

        return $this;
    }

    /**
     * Gets main_email_notification_status_reason
     *
     * @return string
     */
    public function getMainEmailNotificationStatusReason()
    {
        return $this->container['main_email_notification_status_reason'];
    }

    /**
     * Sets main_email_notification_status_reason
     *
     * @param string $main_email_notification_status_reason main_email_notification_status_reason
     *
     * @return $this
     */
    public function setMainEmailNotificationStatusReason($main_email_notification_status_reason)
    {
        $this->container['main_email_notification_status_reason'] = $main_email_notification_status_reason;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets cufe
     *
     * @return string
     */
    public function getCufe()
    {
        return $this->container['cufe'];
    }

    /**
     * Sets cufe
     *
     * @param string $cufe cufe
     *
     * @return $this
     */
    public function setCufe($cufe)
    {
        $this->container['cufe'] = $cufe;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


