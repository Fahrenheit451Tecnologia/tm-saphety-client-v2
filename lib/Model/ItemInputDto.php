<?php
/**
 * ItemInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocuments
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Model;

use \ArrayAccess;
use \TM\Saphety\Clientv2\ObjectSerializer;

/**
 * ItemInputDto Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gtin' => 'string',
        'buyer_item_identification' => 'string',
        'seller_item_identification' => 'string',
        'seller_contract_code' => 'string',
        'serial_number' => 'string',
        'description' => 'string',
        'brand_name' => 'string',
        'model_name' => 'string',
        'pack_quantity' => 'string',
        'pack_unit_of_measure' => 'string',
        'units_per_package' => 'string',
        'gas_and_oil_properties' => '\TM\Saphety\Clientv2\Model\GasAndOilInputDto[]',
        'height' => 'string',
        'height_unit_of_measure' => 'string',
        'width' => 'string',
        'width_unit_of_measure' => 'string',
        'depth' => 'string',
        'depth_unit_of_measure' => 'string',
        'volume' => 'string',
        'volume_unit_of_measure' => 'string',
        'lot_number' => 'string',
        'expiry_date' => 'string',
        'car_industry' => '\TM\Saphety\Clientv2\Model\CarIndustryInputDto',
        'mandated_agent' => '\TM\Saphety\Clientv2\Model\MandatedAgent'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gtin' => null,
        'buyer_item_identification' => null,
        'seller_item_identification' => null,
        'seller_contract_code' => null,
        'serial_number' => null,
        'description' => null,
        'brand_name' => null,
        'model_name' => null,
        'pack_quantity' => null,
        'pack_unit_of_measure' => null,
        'units_per_package' => null,
        'gas_and_oil_properties' => null,
        'height' => null,
        'height_unit_of_measure' => null,
        'width' => null,
        'width_unit_of_measure' => null,
        'depth' => null,
        'depth_unit_of_measure' => null,
        'volume' => null,
        'volume_unit_of_measure' => null,
        'lot_number' => null,
        'expiry_date' => null,
        'car_industry' => null,
        'mandated_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gtin' => 'Gtin',
        'buyer_item_identification' => 'BuyerItemIdentification',
        'seller_item_identification' => 'SellerItemIdentification',
        'seller_contract_code' => 'SellerContractCode',
        'serial_number' => 'SerialNumber',
        'description' => 'Description',
        'brand_name' => 'BrandName',
        'model_name' => 'ModelName',
        'pack_quantity' => 'PackQuantity',
        'pack_unit_of_measure' => 'PackUnitOfMeasure',
        'units_per_package' => 'UnitsPerPackage',
        'gas_and_oil_properties' => 'GasAndOilProperties',
        'height' => 'Height',
        'height_unit_of_measure' => 'HeightUnitOfMeasure',
        'width' => 'Width',
        'width_unit_of_measure' => 'WidthUnitOfMeasure',
        'depth' => 'Depth',
        'depth_unit_of_measure' => 'DepthUnitOfMeasure',
        'volume' => 'Volume',
        'volume_unit_of_measure' => 'VolumeUnitOfMeasure',
        'lot_number' => 'LotNumber',
        'expiry_date' => 'ExpiryDate',
        'car_industry' => 'CarIndustry',
        'mandated_agent' => 'MandatedAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gtin' => 'setGtin',
        'buyer_item_identification' => 'setBuyerItemIdentification',
        'seller_item_identification' => 'setSellerItemIdentification',
        'seller_contract_code' => 'setSellerContractCode',
        'serial_number' => 'setSerialNumber',
        'description' => 'setDescription',
        'brand_name' => 'setBrandName',
        'model_name' => 'setModelName',
        'pack_quantity' => 'setPackQuantity',
        'pack_unit_of_measure' => 'setPackUnitOfMeasure',
        'units_per_package' => 'setUnitsPerPackage',
        'gas_and_oil_properties' => 'setGasAndOilProperties',
        'height' => 'setHeight',
        'height_unit_of_measure' => 'setHeightUnitOfMeasure',
        'width' => 'setWidth',
        'width_unit_of_measure' => 'setWidthUnitOfMeasure',
        'depth' => 'setDepth',
        'depth_unit_of_measure' => 'setDepthUnitOfMeasure',
        'volume' => 'setVolume',
        'volume_unit_of_measure' => 'setVolumeUnitOfMeasure',
        'lot_number' => 'setLotNumber',
        'expiry_date' => 'setExpiryDate',
        'car_industry' => 'setCarIndustry',
        'mandated_agent' => 'setMandatedAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gtin' => 'getGtin',
        'buyer_item_identification' => 'getBuyerItemIdentification',
        'seller_item_identification' => 'getSellerItemIdentification',
        'seller_contract_code' => 'getSellerContractCode',
        'serial_number' => 'getSerialNumber',
        'description' => 'getDescription',
        'brand_name' => 'getBrandName',
        'model_name' => 'getModelName',
        'pack_quantity' => 'getPackQuantity',
        'pack_unit_of_measure' => 'getPackUnitOfMeasure',
        'units_per_package' => 'getUnitsPerPackage',
        'gas_and_oil_properties' => 'getGasAndOilProperties',
        'height' => 'getHeight',
        'height_unit_of_measure' => 'getHeightUnitOfMeasure',
        'width' => 'getWidth',
        'width_unit_of_measure' => 'getWidthUnitOfMeasure',
        'depth' => 'getDepth',
        'depth_unit_of_measure' => 'getDepthUnitOfMeasure',
        'volume' => 'getVolume',
        'volume_unit_of_measure' => 'getVolumeUnitOfMeasure',
        'lot_number' => 'getLotNumber',
        'expiry_date' => 'getExpiryDate',
        'car_industry' => 'getCarIndustry',
        'mandated_agent' => 'getMandatedAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['buyer_item_identification'] = isset($data['buyer_item_identification']) ? $data['buyer_item_identification'] : null;
        $this->container['seller_item_identification'] = isset($data['seller_item_identification']) ? $data['seller_item_identification'] : null;
        $this->container['seller_contract_code'] = isset($data['seller_contract_code']) ? $data['seller_contract_code'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['model_name'] = isset($data['model_name']) ? $data['model_name'] : null;
        $this->container['pack_quantity'] = isset($data['pack_quantity']) ? $data['pack_quantity'] : null;
        $this->container['pack_unit_of_measure'] = isset($data['pack_unit_of_measure']) ? $data['pack_unit_of_measure'] : null;
        $this->container['units_per_package'] = isset($data['units_per_package']) ? $data['units_per_package'] : null;
        $this->container['gas_and_oil_properties'] = isset($data['gas_and_oil_properties']) ? $data['gas_and_oil_properties'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['height_unit_of_measure'] = isset($data['height_unit_of_measure']) ? $data['height_unit_of_measure'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['width_unit_of_measure'] = isset($data['width_unit_of_measure']) ? $data['width_unit_of_measure'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['depth_unit_of_measure'] = isset($data['depth_unit_of_measure']) ? $data['depth_unit_of_measure'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['volume_unit_of_measure'] = isset($data['volume_unit_of_measure']) ? $data['volume_unit_of_measure'] : null;
        $this->container['lot_number'] = isset($data['lot_number']) ? $data['lot_number'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['car_industry'] = isset($data['car_industry']) ? $data['car_industry'] : null;
        $this->container['mandated_agent'] = isset($data['mandated_agent']) ? $data['mandated_agent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['gtin']) && (mb_strlen($this->container['gtin']) > 20)) {
            $invalidProperties[] = "invalid value for 'gtin', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['buyer_item_identification']) && (mb_strlen($this->container['buyer_item_identification']) > 20)) {
            $invalidProperties[] = "invalid value for 'buyer_item_identification', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['seller_item_identification']) && (mb_strlen($this->container['seller_item_identification']) > 20)) {
            $invalidProperties[] = "invalid value for 'seller_item_identification', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['seller_contract_code']) && (mb_strlen($this->container['seller_contract_code']) > 40)) {
            $invalidProperties[] = "invalid value for 'seller_contract_code', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 400)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) > 20)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['model_name']) && (mb_strlen($this->container['model_name']) > 20)) {
            $invalidProperties[] = "invalid value for 'model_name', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['pack_quantity']) && (mb_strlen($this->container['pack_quantity']) > 19)) {
            $invalidProperties[] = "invalid value for 'pack_quantity', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['units_per_package']) && (mb_strlen($this->container['units_per_package']) > 19)) {
            $invalidProperties[] = "invalid value for 'units_per_package', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['height']) && (mb_strlen($this->container['height']) > 19)) {
            $invalidProperties[] = "invalid value for 'height', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['width']) && (mb_strlen($this->container['width']) > 19)) {
            $invalidProperties[] = "invalid value for 'width', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['depth']) && (mb_strlen($this->container['depth']) > 19)) {
            $invalidProperties[] = "invalid value for 'depth', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['volume']) && (mb_strlen($this->container['volume']) > 19)) {
            $invalidProperties[] = "invalid value for 'volume', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gtin
     *
     * @return string
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string $gtin MaxLength: 20
     *
     * @return $this
     */
    public function setGtin($gtin)
    {
        if (!is_null($gtin) && (mb_strlen($gtin) > 20)) {
            throw new \InvalidArgumentException('invalid length for $gtin when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets buyer_item_identification
     *
     * @return string
     */
    public function getBuyerItemIdentification()
    {
        return $this->container['buyer_item_identification'];
    }

    /**
     * Sets buyer_item_identification
     *
     * @param string $buyer_item_identification MaxLength: 20
     *
     * @return $this
     */
    public function setBuyerItemIdentification($buyer_item_identification)
    {
        if (!is_null($buyer_item_identification) && (mb_strlen($buyer_item_identification) > 20)) {
            throw new \InvalidArgumentException('invalid length for $buyer_item_identification when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['buyer_item_identification'] = $buyer_item_identification;

        return $this;
    }

    /**
     * Gets seller_item_identification
     *
     * @return string
     */
    public function getSellerItemIdentification()
    {
        return $this->container['seller_item_identification'];
    }

    /**
     * Sets seller_item_identification
     *
     * @param string $seller_item_identification MaxLength: 20
     *
     * @return $this
     */
    public function setSellerItemIdentification($seller_item_identification)
    {
        if (!is_null($seller_item_identification) && (mb_strlen($seller_item_identification) > 20)) {
            throw new \InvalidArgumentException('invalid length for $seller_item_identification when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['seller_item_identification'] = $seller_item_identification;

        return $this;
    }

    /**
     * Gets seller_contract_code
     *
     * @return string
     */
    public function getSellerContractCode()
    {
        return $this->container['seller_contract_code'];
    }

    /**
     * Sets seller_contract_code
     *
     * @param string $seller_contract_code MaxLength: 40
     *
     * @return $this
     */
    public function setSellerContractCode($seller_contract_code)
    {
        if (!is_null($seller_contract_code) && (mb_strlen($seller_contract_code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $seller_contract_code when calling ItemInputDto., must be smaller than or equal to 40.');
        }

        $this->container['seller_contract_code'] = $seller_contract_code;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number MaxLength: 20
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        if (!is_null($serial_number) && (mb_strlen($serial_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description MaxLength: 400
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 400)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemInputDto., must be smaller than or equal to 400.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name MaxLength: 20
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        if (!is_null($brand_name) && (mb_strlen($brand_name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string $model_name MaxLength: 20
     *
     * @return $this
     */
    public function setModelName($model_name)
    {
        if (!is_null($model_name) && (mb_strlen($model_name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $model_name when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets pack_quantity
     *
     * @return string
     */
    public function getPackQuantity()
    {
        return $this->container['pack_quantity'];
    }

    /**
     * Sets pack_quantity
     *
     * @param string $pack_quantity MaxLength: 19
     *
     * @return $this
     */
    public function setPackQuantity($pack_quantity)
    {
        if (!is_null($pack_quantity) && (mb_strlen($pack_quantity) > 19)) {
            throw new \InvalidArgumentException('invalid length for $pack_quantity when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['pack_quantity'] = $pack_quantity;

        return $this;
    }

    /**
     * Gets pack_unit_of_measure
     *
     * @return string
     */
    public function getPackUnitOfMeasure()
    {
        return $this->container['pack_unit_of_measure'];
    }

    /**
     * Sets pack_unit_of_measure
     *
     * @param string $pack_unit_of_measure pack_unit_of_measure
     *
     * @return $this
     */
    public function setPackUnitOfMeasure($pack_unit_of_measure)
    {
        $this->container['pack_unit_of_measure'] = $pack_unit_of_measure;

        return $this;
    }

    /**
     * Gets units_per_package
     *
     * @return string
     */
    public function getUnitsPerPackage()
    {
        return $this->container['units_per_package'];
    }

    /**
     * Sets units_per_package
     *
     * @param string $units_per_package MaxLength: 19
     *
     * @return $this
     */
    public function setUnitsPerPackage($units_per_package)
    {
        if (!is_null($units_per_package) && (mb_strlen($units_per_package) > 19)) {
            throw new \InvalidArgumentException('invalid length for $units_per_package when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['units_per_package'] = $units_per_package;

        return $this;
    }

    /**
     * Gets gas_and_oil_properties
     *
     * @return \TM\Saphety\Clientv2\Model\GasAndOilInputDto[]
     */
    public function getGasAndOilProperties()
    {
        return $this->container['gas_and_oil_properties'];
    }

    /**
     * Sets gas_and_oil_properties
     *
     * @param \TM\Saphety\Clientv2\Model\GasAndOilInputDto[] $gas_and_oil_properties gas_and_oil_properties
     *
     * @return $this
     */
    public function setGasAndOilProperties($gas_and_oil_properties)
    {
        $this->container['gas_and_oil_properties'] = $gas_and_oil_properties;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height MaxLength: 19
     *
     * @return $this
     */
    public function setHeight($height)
    {
        if (!is_null($height) && (mb_strlen($height) > 19)) {
            throw new \InvalidArgumentException('invalid length for $height when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets height_unit_of_measure
     *
     * @return string
     */
    public function getHeightUnitOfMeasure()
    {
        return $this->container['height_unit_of_measure'];
    }

    /**
     * Sets height_unit_of_measure
     *
     * @param string $height_unit_of_measure height_unit_of_measure
     *
     * @return $this
     */
    public function setHeightUnitOfMeasure($height_unit_of_measure)
    {
        $this->container['height_unit_of_measure'] = $height_unit_of_measure;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width MaxLength: 19
     *
     * @return $this
     */
    public function setWidth($width)
    {
        if (!is_null($width) && (mb_strlen($width) > 19)) {
            throw new \InvalidArgumentException('invalid length for $width when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets width_unit_of_measure
     *
     * @return string
     */
    public function getWidthUnitOfMeasure()
    {
        return $this->container['width_unit_of_measure'];
    }

    /**
     * Sets width_unit_of_measure
     *
     * @param string $width_unit_of_measure width_unit_of_measure
     *
     * @return $this
     */
    public function setWidthUnitOfMeasure($width_unit_of_measure)
    {
        $this->container['width_unit_of_measure'] = $width_unit_of_measure;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return string
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param string $depth MaxLength: 19
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        if (!is_null($depth) && (mb_strlen($depth) > 19)) {
            throw new \InvalidArgumentException('invalid length for $depth when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets depth_unit_of_measure
     *
     * @return string
     */
    public function getDepthUnitOfMeasure()
    {
        return $this->container['depth_unit_of_measure'];
    }

    /**
     * Sets depth_unit_of_measure
     *
     * @param string $depth_unit_of_measure depth_unit_of_measure
     *
     * @return $this
     */
    public function setDepthUnitOfMeasure($depth_unit_of_measure)
    {
        $this->container['depth_unit_of_measure'] = $depth_unit_of_measure;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return string
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param string $volume MaxLength: 19
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        if (!is_null($volume) && (mb_strlen($volume) > 19)) {
            throw new \InvalidArgumentException('invalid length for $volume when calling ItemInputDto., must be smaller than or equal to 19.');
        }

        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volume_unit_of_measure
     *
     * @return string
     */
    public function getVolumeUnitOfMeasure()
    {
        return $this->container['volume_unit_of_measure'];
    }

    /**
     * Sets volume_unit_of_measure
     *
     * @param string $volume_unit_of_measure volume_unit_of_measure
     *
     * @return $this
     */
    public function setVolumeUnitOfMeasure($volume_unit_of_measure)
    {
        $this->container['volume_unit_of_measure'] = $volume_unit_of_measure;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string $lot_number MaxLength: 20
     *
     * @return $this
     */
    public function setLotNumber($lot_number)
    {
        if (!is_null($lot_number) && (mb_strlen($lot_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling ItemInputDto., must be smaller than or equal to 20.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets car_industry
     *
     * @return \TM\Saphety\Clientv2\Model\CarIndustryInputDto
     */
    public function getCarIndustry()
    {
        return $this->container['car_industry'];
    }

    /**
     * Sets car_industry
     *
     * @param \TM\Saphety\Clientv2\Model\CarIndustryInputDto $car_industry car_industry
     *
     * @return $this
     */
    public function setCarIndustry($car_industry)
    {
        $this->container['car_industry'] = $car_industry;

        return $this;
    }

    /**
     * Gets mandated_agent
     *
     * @return \TM\Saphety\Clientv2\Model\MandatedAgent
     */
    public function getMandatedAgent()
    {
        return $this->container['mandated_agent'];
    }

    /**
     * Sets mandated_agent
     *
     * @param \TM\Saphety\Clientv2\Model\MandatedAgent $mandated_agent mandated_agent
     *
     * @return $this
     */
    public function setMandatedAgent($mandated_agent)
    {
        $this->container['mandated_agent'] = $mandated_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


