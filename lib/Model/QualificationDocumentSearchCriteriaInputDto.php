<?php
/**
 * QualificationDocumentSearchCriteriaInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocumentsQuery
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QualificationDocumentSearchCriteriaInputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QualificationDocumentSearchCriteriaInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QualificationDocumentSearchCriteriaInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_status' => 'string',
        'track_id' => 'string',
        'test_set_id' => 'string',
        'document_number' => 'string',
        'creation_start_date' => '\DateTime',
        'creation_end_date' => '\DateTime',
        'suppliers' => 'string[]',
        'document_type' => 'string',
        'issue_start_date' => '\DateTime',
        'issue_end_date' => '\DateTime',
        'offset' => 'int',
        'number_of_records' => 'int',
        'sort_field' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_status' => null,
        'track_id' => 'uuid',
        'test_set_id' => null,
        'document_number' => null,
        'creation_start_date' => 'date-time',
        'creation_end_date' => 'date-time',
        'suppliers' => 'uuid',
        'document_type' => null,
        'issue_start_date' => 'date-time',
        'issue_end_date' => 'date-time',
        'offset' => 'int32',
        'number_of_records' => 'int32',
        'sort_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_status' => 'DocumentStatus',
        'track_id' => 'TrackId',
        'test_set_id' => 'TestSetId',
        'document_number' => 'DocumentNumber',
        'creation_start_date' => 'CreationStartDate',
        'creation_end_date' => 'CreationEndDate',
        'suppliers' => 'Suppliers',
        'document_type' => 'DocumentType',
        'issue_start_date' => 'IssueStartDate',
        'issue_end_date' => 'IssueEndDate',
        'offset' => 'Offset',
        'number_of_records' => 'NumberOfRecords',
        'sort_field' => 'SortField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_status' => 'setDocumentStatus',
        'track_id' => 'setTrackId',
        'test_set_id' => 'setTestSetId',
        'document_number' => 'setDocumentNumber',
        'creation_start_date' => 'setCreationStartDate',
        'creation_end_date' => 'setCreationEndDate',
        'suppliers' => 'setSuppliers',
        'document_type' => 'setDocumentType',
        'issue_start_date' => 'setIssueStartDate',
        'issue_end_date' => 'setIssueEndDate',
        'offset' => 'setOffset',
        'number_of_records' => 'setNumberOfRecords',
        'sort_field' => 'setSortField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_status' => 'getDocumentStatus',
        'track_id' => 'getTrackId',
        'test_set_id' => 'getTestSetId',
        'document_number' => 'getDocumentNumber',
        'creation_start_date' => 'getCreationStartDate',
        'creation_end_date' => 'getCreationEndDate',
        'suppliers' => 'getSuppliers',
        'document_type' => 'getDocumentType',
        'issue_start_date' => 'getIssueStartDate',
        'issue_end_date' => 'getIssueEndDate',
        'offset' => 'getOffset',
        'number_of_records' => 'getNumberOfRecords',
        'sort_field' => 'getSortField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_STATUS_SUBMITED = 'Submited';
    const DOCUMENT_STATUS_WITH_ERROR = 'WithError';
    const DOCUMENT_STATUS_ACCEPTED = 'Accepted';
    const DOCUMENT_STATUS_ACCEPTED_WITH_WARNINGS = 'AcceptedWithWarnings';
    const DOCUMENT_TYPE_SALES_INVOICE = 'SalesInvoice';
    const DOCUMENT_TYPE_CREDIT_NOTE = 'CreditNote';
    const DOCUMENT_TYPE_DEBIT_NOTE = 'DebitNote';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentStatusAllowableValues()
    {
        return [
            self::DOCUMENT_STATUS_SUBMITED,
            self::DOCUMENT_STATUS_WITH_ERROR,
            self::DOCUMENT_STATUS_ACCEPTED,
            self::DOCUMENT_STATUS_ACCEPTED_WITH_WARNINGS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_SALES_INVOICE,
            self::DOCUMENT_TYPE_CREDIT_NOTE,
            self::DOCUMENT_TYPE_DEBIT_NOTE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_status'] = isset($data['document_status']) ? $data['document_status'] : null;
        $this->container['track_id'] = isset($data['track_id']) ? $data['track_id'] : null;
        $this->container['test_set_id'] = isset($data['test_set_id']) ? $data['test_set_id'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['creation_start_date'] = isset($data['creation_start_date']) ? $data['creation_start_date'] : null;
        $this->container['creation_end_date'] = isset($data['creation_end_date']) ? $data['creation_end_date'] : null;
        $this->container['suppliers'] = isset($data['suppliers']) ? $data['suppliers'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['issue_start_date'] = isset($data['issue_start_date']) ? $data['issue_start_date'] : null;
        $this->container['issue_end_date'] = isset($data['issue_end_date']) ? $data['issue_end_date'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['number_of_records'] = isset($data['number_of_records']) ? $data['number_of_records'] : null;
        $this->container['sort_field'] = isset($data['sort_field']) ? $data['sort_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentStatusAllowableValues();
        if (!is_null($this->container['document_status']) && !in_array($this->container['document_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_status
     *
     * @return string
     */
    public function getDocumentStatus()
    {
        return $this->container['document_status'];
    }

    /**
     * Sets document_status
     *
     * @param string $document_status document_status
     *
     * @return $this
     */
    public function setDocumentStatus($document_status)
    {
        $allowedValues = $this->getDocumentStatusAllowableValues();
        if (!is_null($document_status) && !in_array($document_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_status'] = $document_status;

        return $this;
    }

    /**
     * Gets track_id
     *
     * @return string
     */
    public function getTrackId()
    {
        return $this->container['track_id'];
    }

    /**
     * Sets track_id
     *
     * @param string $track_id track_id
     *
     * @return $this
     */
    public function setTrackId($track_id)
    {
        $this->container['track_id'] = $track_id;

        return $this;
    }

    /**
     * Gets test_set_id
     *
     * @return string
     */
    public function getTestSetId()
    {
        return $this->container['test_set_id'];
    }

    /**
     * Sets test_set_id
     *
     * @param string $test_set_id test_set_id
     *
     * @return $this
     */
    public function setTestSetId($test_set_id)
    {
        $this->container['test_set_id'] = $test_set_id;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number document_number
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets creation_start_date
     *
     * @return \DateTime
     */
    public function getCreationStartDate()
    {
        return $this->container['creation_start_date'];
    }

    /**
     * Sets creation_start_date
     *
     * @param \DateTime $creation_start_date creation_start_date
     *
     * @return $this
     */
    public function setCreationStartDate($creation_start_date)
    {
        $this->container['creation_start_date'] = $creation_start_date;

        return $this;
    }

    /**
     * Gets creation_end_date
     *
     * @return \DateTime
     */
    public function getCreationEndDate()
    {
        return $this->container['creation_end_date'];
    }

    /**
     * Sets creation_end_date
     *
     * @param \DateTime $creation_end_date creation_end_date
     *
     * @return $this
     */
    public function setCreationEndDate($creation_end_date)
    {
        $this->container['creation_end_date'] = $creation_end_date;

        return $this;
    }

    /**
     * Gets suppliers
     *
     * @return string[]
     */
    public function getSuppliers()
    {
        return $this->container['suppliers'];
    }

    /**
     * Sets suppliers
     *
     * @param string[] $suppliers suppliers
     *
     * @return $this
     */
    public function setSuppliers($suppliers)
    {
        $this->container['suppliers'] = $suppliers;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets issue_start_date
     *
     * @return \DateTime
     */
    public function getIssueStartDate()
    {
        return $this->container['issue_start_date'];
    }

    /**
     * Sets issue_start_date
     *
     * @param \DateTime $issue_start_date issue_start_date
     *
     * @return $this
     */
    public function setIssueStartDate($issue_start_date)
    {
        $this->container['issue_start_date'] = $issue_start_date;

        return $this;
    }

    /**
     * Gets issue_end_date
     *
     * @return \DateTime
     */
    public function getIssueEndDate()
    {
        return $this->container['issue_end_date'];
    }

    /**
     * Sets issue_end_date
     *
     * @param \DateTime $issue_end_date issue_end_date
     *
     * @return $this
     */
    public function setIssueEndDate($issue_end_date)
    {
        $this->container['issue_end_date'] = $issue_end_date;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets number_of_records
     *
     * @return int
     */
    public function getNumberOfRecords()
    {
        return $this->container['number_of_records'];
    }

    /**
     * Sets number_of_records
     *
     * @param int $number_of_records number_of_records
     *
     * @return $this
     */
    public function setNumberOfRecords($number_of_records)
    {
        $this->container['number_of_records'] = $number_of_records;

        return $this;
    }

    /**
     * Gets sort_field
     *
     * @return string
     */
    public function getSortField()
    {
        return $this->container['sort_field'];
    }

    /**
     * Sets sort_field
     *
     * @param string $sort_field sort_field
     *
     * @return $this
     */
    public function setSortField($sort_field)
    {
        $this->container['sort_field'] = $sort_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


