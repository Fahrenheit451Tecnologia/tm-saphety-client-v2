<?php
/**
 * QualificationDocumentSearchOutputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocumentsQuery
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Model;

use \ArrayAccess;
use \TM\Saphety\Clientv2\ObjectSerializer;

/**
 * QualificationDocumentSearchOutputDto Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QualificationDocumentSearchOutputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QualificationDocumentSearchOutputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'supplier_identification' => 'string',
        'supplier_name' => 'string',
        'customer_identification' => 'string',
        'customer_name' => 'string',
        'status_message' => 'string',
        'document_status' => 'string',
        'creation_date' => '\DateTime',
        'last_update_date' => '\DateTime',
        'track_id' => 'string',
        'test_set_id' => 'string',
        'cufe' => 'string',
        'document_type' => 'string',
        'document_number' => 'string',
        'issue_date' => '\DateTime',
        'currency' => 'string',
        'total_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'supplier_identification' => null,
        'supplier_name' => null,
        'customer_identification' => null,
        'customer_name' => null,
        'status_message' => null,
        'document_status' => null,
        'creation_date' => 'date-time',
        'last_update_date' => 'date-time',
        'track_id' => null,
        'test_set_id' => 'uuid',
        'cufe' => null,
        'document_type' => null,
        'document_number' => null,
        'issue_date' => 'date-time',
        'currency' => null,
        'total_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'supplier_identification' => 'SupplierIdentification',
        'supplier_name' => 'SupplierName',
        'customer_identification' => 'CustomerIdentification',
        'customer_name' => 'CustomerName',
        'status_message' => 'StatusMessage',
        'document_status' => 'DocumentStatus',
        'creation_date' => 'CreationDate',
        'last_update_date' => 'LastUpdateDate',
        'track_id' => 'TrackId',
        'test_set_id' => 'TestSetId',
        'cufe' => 'Cufe',
        'document_type' => 'DocumentType',
        'document_number' => 'DocumentNumber',
        'issue_date' => 'IssueDate',
        'currency' => 'Currency',
        'total_amount' => 'TotalAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'supplier_identification' => 'setSupplierIdentification',
        'supplier_name' => 'setSupplierName',
        'customer_identification' => 'setCustomerIdentification',
        'customer_name' => 'setCustomerName',
        'status_message' => 'setStatusMessage',
        'document_status' => 'setDocumentStatus',
        'creation_date' => 'setCreationDate',
        'last_update_date' => 'setLastUpdateDate',
        'track_id' => 'setTrackId',
        'test_set_id' => 'setTestSetId',
        'cufe' => 'setCufe',
        'document_type' => 'setDocumentType',
        'document_number' => 'setDocumentNumber',
        'issue_date' => 'setIssueDate',
        'currency' => 'setCurrency',
        'total_amount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'supplier_identification' => 'getSupplierIdentification',
        'supplier_name' => 'getSupplierName',
        'customer_identification' => 'getCustomerIdentification',
        'customer_name' => 'getCustomerName',
        'status_message' => 'getStatusMessage',
        'document_status' => 'getDocumentStatus',
        'creation_date' => 'getCreationDate',
        'last_update_date' => 'getLastUpdateDate',
        'track_id' => 'getTrackId',
        'test_set_id' => 'getTestSetId',
        'cufe' => 'getCufe',
        'document_type' => 'getDocumentType',
        'document_number' => 'getDocumentNumber',
        'issue_date' => 'getIssueDate',
        'currency' => 'getCurrency',
        'total_amount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['supplier_identification'] = isset($data['supplier_identification']) ? $data['supplier_identification'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['customer_identification'] = isset($data['customer_identification']) ? $data['customer_identification'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['document_status'] = isset($data['document_status']) ? $data['document_status'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['track_id'] = isset($data['track_id']) ? $data['track_id'] : null;
        $this->container['test_set_id'] = isset($data['test_set_id']) ? $data['test_set_id'] : null;
        $this->container['cufe'] = isset($data['cufe']) ? $data['cufe'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets supplier_identification
     *
     * @return string
     */
    public function getSupplierIdentification()
    {
        return $this->container['supplier_identification'];
    }

    /**
     * Sets supplier_identification
     *
     * @param string $supplier_identification supplier_identification
     *
     * @return $this
     */
    public function setSupplierIdentification($supplier_identification)
    {
        $this->container['supplier_identification'] = $supplier_identification;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets customer_identification
     *
     * @return string
     */
    public function getCustomerIdentification()
    {
        return $this->container['customer_identification'];
    }

    /**
     * Sets customer_identification
     *
     * @param string $customer_identification customer_identification
     *
     * @return $this
     */
    public function setCustomerIdentification($customer_identification)
    {
        $this->container['customer_identification'] = $customer_identification;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string $status_message status_message
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets document_status
     *
     * @return string
     */
    public function getDocumentStatus()
    {
        return $this->container['document_status'];
    }

    /**
     * Sets document_status
     *
     * @param string $document_status document_status
     *
     * @return $this
     */
    public function setDocumentStatus($document_status)
    {
        $this->container['document_status'] = $document_status;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param \DateTime $last_update_date last_update_date
     *
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets track_id
     *
     * @return string
     */
    public function getTrackId()
    {
        return $this->container['track_id'];
    }

    /**
     * Sets track_id
     *
     * @param string $track_id track_id
     *
     * @return $this
     */
    public function setTrackId($track_id)
    {
        $this->container['track_id'] = $track_id;

        return $this;
    }

    /**
     * Gets test_set_id
     *
     * @return string
     */
    public function getTestSetId()
    {
        return $this->container['test_set_id'];
    }

    /**
     * Sets test_set_id
     *
     * @param string $test_set_id test_set_id
     *
     * @return $this
     */
    public function setTestSetId($test_set_id)
    {
        $this->container['test_set_id'] = $test_set_id;

        return $this;
    }

    /**
     * Gets cufe
     *
     * @return string
     */
    public function getCufe()
    {
        return $this->container['cufe'];
    }

    /**
     * Sets cufe
     *
     * @param string $cufe cufe
     *
     * @return $this
     */
    public function setCufe($cufe)
    {
        $this->container['cufe'] = $cufe;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number document_number
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime $issue_date issue_date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


