<?php
/**
 * QualificationSerieCreateInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocuments
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TM\Saphety\Clientv2\Model;

use \ArrayAccess;
use \TM\Saphety\Clientv2\ObjectSerializer;

/**
 * QualificationSerieCreateInputDto Class Doc Comment
 *
 * @category Class
 * @package  TM\Saphety\Clientv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QualificationSerieCreateInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QualificationSerieCreateInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'authorization_number' => 'string',
        'prefix' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'start_value' => 'int',
        'end_value' => 'int',
        'effective_value' => 'int',
        'technical_key' => 'string',
        'test_set_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'authorization_number' => null,
        'prefix' => null,
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'start_value' => 'int64',
        'end_value' => 'int64',
        'effective_value' => 'int64',
        'technical_key' => null,
        'test_set_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'authorization_number' => 'AuthorizationNumber',
        'prefix' => 'Prefix',
        'valid_from' => 'ValidFrom',
        'valid_to' => 'ValidTo',
        'start_value' => 'StartValue',
        'end_value' => 'EndValue',
        'effective_value' => 'EffectiveValue',
        'technical_key' => 'TechnicalKey',
        'test_set_id' => 'TestSetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'authorization_number' => 'setAuthorizationNumber',
        'prefix' => 'setPrefix',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'start_value' => 'setStartValue',
        'end_value' => 'setEndValue',
        'effective_value' => 'setEffectiveValue',
        'technical_key' => 'setTechnicalKey',
        'test_set_id' => 'setTestSetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'authorization_number' => 'getAuthorizationNumber',
        'prefix' => 'getPrefix',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'start_value' => 'getStartValue',
        'end_value' => 'getEndValue',
        'effective_value' => 'getEffectiveValue',
        'technical_key' => 'getTechnicalKey',
        'test_set_id' => 'getTestSetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['authorization_number'] = isset($data['authorization_number']) ? $data['authorization_number'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['start_value'] = isset($data['start_value']) ? $data['start_value'] : null;
        $this->container['end_value'] = isset($data['end_value']) ? $data['end_value'] : null;
        $this->container['effective_value'] = isset($data['effective_value']) ? $data['effective_value'] : null;
        $this->container['technical_key'] = isset($data['technical_key']) ? $data['technical_key'] : null;
        $this->container['test_set_id'] = isset($data['test_set_id']) ? $data['test_set_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['prefix']) && (mb_strlen($this->container['prefix']) > 4)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        if ($this->container['start_value'] === null) {
            $invalidProperties[] = "'start_value' can't be null";
        }
        if ($this->container['test_set_id'] === null) {
            $invalidProperties[] = "'test_set_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name MaxLength: 50
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling QualificationSerieCreateInputDto., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets authorization_number
     *
     * @return string
     */
    public function getAuthorizationNumber()
    {
        return $this->container['authorization_number'];
    }

    /**
     * Sets authorization_number
     *
     * @param string $authorization_number authorization_number
     *
     * @return $this
     */
    public function setAuthorizationNumber($authorization_number)
    {
        $this->container['authorization_number'] = $authorization_number;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string $prefix MaxLength: 4
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        if (!is_null($prefix) && (mb_strlen($prefix) > 4)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling QualificationSerieCreateInputDto., must be smaller than or equal to 4.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets start_value
     *
     * @return int
     */
    public function getStartValue()
    {
        return $this->container['start_value'];
    }

    /**
     * Sets start_value
     *
     * @param int $start_value start_value
     *
     * @return $this
     */
    public function setStartValue($start_value)
    {
        $this->container['start_value'] = $start_value;

        return $this;
    }

    /**
     * Gets end_value
     *
     * @return int
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     *
     * @param int $end_value end_value
     *
     * @return $this
     */
    public function setEndValue($end_value)
    {
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets effective_value
     *
     * @return int
     */
    public function getEffectiveValue()
    {
        return $this->container['effective_value'];
    }

    /**
     * Sets effective_value
     *
     * @param int $effective_value effective_value
     *
     * @return $this
     */
    public function setEffectiveValue($effective_value)
    {
        $this->container['effective_value'] = $effective_value;

        return $this;
    }

    /**
     * Gets technical_key
     *
     * @return string
     */
    public function getTechnicalKey()
    {
        return $this->container['technical_key'];
    }

    /**
     * Sets technical_key
     *
     * @param string $technical_key technical_key
     *
     * @return $this
     */
    public function setTechnicalKey($technical_key)
    {
        $this->container['technical_key'] = $technical_key;

        return $this;
    }

    /**
     * Gets test_set_id
     *
     * @return string
     */
    public function getTestSetId()
    {
        return $this->container['test_set_id'];
    }

    /**
     * Sets test_set_id
     *
     * @param string $test_set_id test_set_id
     *
     * @return $this
     */
    public function setTestSetId($test_set_id)
    {
        $this->container['test_set_id'] = $test_set_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


