<?php
/**
 * SalesInvoiceInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OutboundDocuments
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesInvoiceInputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesInvoiceInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesInvoiceInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_period' => '\Swagger\Client\Model\PeriodInputDto',
        'delivery_terms' => '\Swagger\Client\Model\DeliveryTermInputDto',
        'withholding_tax_sub_totals' => '\Swagger\Client\Model\WithholdingTaxSubTotalInputDto[]',
        'withholding_tax_totals' => '\Swagger\Client\Model\WithholdingTaxTotalInputDto[]',
        'delivery_date' => 'string',
        'serie_prefix' => 'string',
        'serie_number' => 'string',
        'issuer_party' => '\Swagger\Client\Model\IssuerPartyInputDto',
        'customer_party' => '\Swagger\Client\Model\CustomerPartyInputDto',
        'notes' => 'string[]',
        'currency' => 'string',
        'lines' => '\Swagger\Client\Model\LineInputDto[]',
        'tax_sub_totals' => '\Swagger\Client\Model\TaxSubTotalInputDto[]',
        'tax_totals' => '\Swagger\Client\Model\TaxTotalInputDto[]',
        'total' => '\Swagger\Client\Model\LegalMonetaryTotalInputDto',
        'issue_date' => 'string',
        'due_date' => 'string',
        'external_reference' => 'string',
        'correlation_document_id' => 'string',
        'serie_external_key' => 'string',
        'additional_notification_emails' => 'string[]',
        'document_references' => '\Swagger\Client\Model\DocumentReferenceInputDto[]',
        'graphical_representation_custom_fields' => '\Swagger\Client\Model\CustomFieldInputDto[]',
        'attachments' => '\Swagger\Client\Model\DocumentAttachmentInputDto[]',
        'pdf_data' => '\Swagger\Client\Model\OutboundDocumentPdfInputDto',
        'prepaid_payments' => '\Swagger\Client\Model\PrepaidPaymentInputDto[]',
        'payment_exchange_rate' => '\Swagger\Client\Model\PaymentExchangeRateInputDto',
        'payment_means' => '\Swagger\Client\Model\PaymentMeanInputDto[]',
        'payment_terms' => '\Swagger\Client\Model\PaymentTermInputDto[]',
        'allowance_charges' => '\Swagger\Client\Model\AllowanceChargeInputDto[]',
        'operation_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_period' => null,
        'delivery_terms' => null,
        'withholding_tax_sub_totals' => null,
        'withholding_tax_totals' => null,
        'delivery_date' => null,
        'serie_prefix' => null,
        'serie_number' => null,
        'issuer_party' => null,
        'customer_party' => null,
        'notes' => null,
        'currency' => null,
        'lines' => null,
        'tax_sub_totals' => null,
        'tax_totals' => null,
        'total' => null,
        'issue_date' => null,
        'due_date' => null,
        'external_reference' => null,
        'correlation_document_id' => null,
        'serie_external_key' => null,
        'additional_notification_emails' => null,
        'document_references' => null,
        'graphical_representation_custom_fields' => null,
        'attachments' => null,
        'pdf_data' => null,
        'prepaid_payments' => null,
        'payment_exchange_rate' => null,
        'payment_means' => null,
        'payment_terms' => null,
        'allowance_charges' => null,
        'operation_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_period' => 'BillingPeriod',
        'delivery_terms' => 'DeliveryTerms',
        'withholding_tax_sub_totals' => 'WithholdingTaxSubTotals',
        'withholding_tax_totals' => 'WithholdingTaxTotals',
        'delivery_date' => 'DeliveryDate',
        'serie_prefix' => 'SeriePrefix',
        'serie_number' => 'SerieNumber',
        'issuer_party' => 'IssuerParty',
        'customer_party' => 'CustomerParty',
        'notes' => 'Notes',
        'currency' => 'Currency',
        'lines' => 'Lines',
        'tax_sub_totals' => 'TaxSubTotals',
        'tax_totals' => 'TaxTotals',
        'total' => 'Total',
        'issue_date' => 'IssueDate',
        'due_date' => 'DueDate',
        'external_reference' => 'ExternalReference',
        'correlation_document_id' => 'CorrelationDocumentId',
        'serie_external_key' => 'SerieExternalKey',
        'additional_notification_emails' => 'AdditionalNotificationEmails',
        'document_references' => 'DocumentReferences',
        'graphical_representation_custom_fields' => 'GraphicalRepresentationCustomFields',
        'attachments' => 'Attachments',
        'pdf_data' => 'PdfData',
        'prepaid_payments' => 'PrepaidPayments',
        'payment_exchange_rate' => 'PaymentExchangeRate',
        'payment_means' => 'PaymentMeans',
        'payment_terms' => 'PaymentTerms',
        'allowance_charges' => 'AllowanceCharges',
        'operation_type' => 'OperationType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_period' => 'setBillingPeriod',
        'delivery_terms' => 'setDeliveryTerms',
        'withholding_tax_sub_totals' => 'setWithholdingTaxSubTotals',
        'withholding_tax_totals' => 'setWithholdingTaxTotals',
        'delivery_date' => 'setDeliveryDate',
        'serie_prefix' => 'setSeriePrefix',
        'serie_number' => 'setSerieNumber',
        'issuer_party' => 'setIssuerParty',
        'customer_party' => 'setCustomerParty',
        'notes' => 'setNotes',
        'currency' => 'setCurrency',
        'lines' => 'setLines',
        'tax_sub_totals' => 'setTaxSubTotals',
        'tax_totals' => 'setTaxTotals',
        'total' => 'setTotal',
        'issue_date' => 'setIssueDate',
        'due_date' => 'setDueDate',
        'external_reference' => 'setExternalReference',
        'correlation_document_id' => 'setCorrelationDocumentId',
        'serie_external_key' => 'setSerieExternalKey',
        'additional_notification_emails' => 'setAdditionalNotificationEmails',
        'document_references' => 'setDocumentReferences',
        'graphical_representation_custom_fields' => 'setGraphicalRepresentationCustomFields',
        'attachments' => 'setAttachments',
        'pdf_data' => 'setPdfData',
        'prepaid_payments' => 'setPrepaidPayments',
        'payment_exchange_rate' => 'setPaymentExchangeRate',
        'payment_means' => 'setPaymentMeans',
        'payment_terms' => 'setPaymentTerms',
        'allowance_charges' => 'setAllowanceCharges',
        'operation_type' => 'setOperationType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_period' => 'getBillingPeriod',
        'delivery_terms' => 'getDeliveryTerms',
        'withholding_tax_sub_totals' => 'getWithholdingTaxSubTotals',
        'withholding_tax_totals' => 'getWithholdingTaxTotals',
        'delivery_date' => 'getDeliveryDate',
        'serie_prefix' => 'getSeriePrefix',
        'serie_number' => 'getSerieNumber',
        'issuer_party' => 'getIssuerParty',
        'customer_party' => 'getCustomerParty',
        'notes' => 'getNotes',
        'currency' => 'getCurrency',
        'lines' => 'getLines',
        'tax_sub_totals' => 'getTaxSubTotals',
        'tax_totals' => 'getTaxTotals',
        'total' => 'getTotal',
        'issue_date' => 'getIssueDate',
        'due_date' => 'getDueDate',
        'external_reference' => 'getExternalReference',
        'correlation_document_id' => 'getCorrelationDocumentId',
        'serie_external_key' => 'getSerieExternalKey',
        'additional_notification_emails' => 'getAdditionalNotificationEmails',
        'document_references' => 'getDocumentReferences',
        'graphical_representation_custom_fields' => 'getGraphicalRepresentationCustomFields',
        'attachments' => 'getAttachments',
        'pdf_data' => 'getPdfData',
        'prepaid_payments' => 'getPrepaidPayments',
        'payment_exchange_rate' => 'getPaymentExchangeRate',
        'payment_means' => 'getPaymentMeans',
        'payment_terms' => 'getPaymentTerms',
        'allowance_charges' => 'getAllowanceCharges',
        'operation_type' => 'getOperationType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['delivery_terms'] = isset($data['delivery_terms']) ? $data['delivery_terms'] : null;
        $this->container['withholding_tax_sub_totals'] = isset($data['withholding_tax_sub_totals']) ? $data['withholding_tax_sub_totals'] : null;
        $this->container['withholding_tax_totals'] = isset($data['withholding_tax_totals']) ? $data['withholding_tax_totals'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['serie_prefix'] = isset($data['serie_prefix']) ? $data['serie_prefix'] : null;
        $this->container['serie_number'] = isset($data['serie_number']) ? $data['serie_number'] : null;
        $this->container['issuer_party'] = isset($data['issuer_party']) ? $data['issuer_party'] : null;
        $this->container['customer_party'] = isset($data['customer_party']) ? $data['customer_party'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['tax_sub_totals'] = isset($data['tax_sub_totals']) ? $data['tax_sub_totals'] : null;
        $this->container['tax_totals'] = isset($data['tax_totals']) ? $data['tax_totals'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['correlation_document_id'] = isset($data['correlation_document_id']) ? $data['correlation_document_id'] : null;
        $this->container['serie_external_key'] = isset($data['serie_external_key']) ? $data['serie_external_key'] : null;
        $this->container['additional_notification_emails'] = isset($data['additional_notification_emails']) ? $data['additional_notification_emails'] : null;
        $this->container['document_references'] = isset($data['document_references']) ? $data['document_references'] : null;
        $this->container['graphical_representation_custom_fields'] = isset($data['graphical_representation_custom_fields']) ? $data['graphical_representation_custom_fields'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['pdf_data'] = isset($data['pdf_data']) ? $data['pdf_data'] : null;
        $this->container['prepaid_payments'] = isset($data['prepaid_payments']) ? $data['prepaid_payments'] : null;
        $this->container['payment_exchange_rate'] = isset($data['payment_exchange_rate']) ? $data['payment_exchange_rate'] : null;
        $this->container['payment_means'] = isset($data['payment_means']) ? $data['payment_means'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['allowance_charges'] = isset($data['allowance_charges']) ? $data['allowance_charges'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['withholding_tax_totals'] === null) {
            $invalidProperties[] = "'withholding_tax_totals' can't be null";
        }
        if ($this->container['delivery_date'] === null) {
            $invalidProperties[] = "'delivery_date' can't be null";
        }
        if ($this->container['issuer_party'] === null) {
            $invalidProperties[] = "'issuer_party' can't be null";
        }
        if ($this->container['customer_party'] === null) {
            $invalidProperties[] = "'customer_party' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        if ($this->container['tax_sub_totals'] === null) {
            $invalidProperties[] = "'tax_sub_totals' can't be null";
        }
        if ($this->container['tax_totals'] === null) {
            $invalidProperties[] = "'tax_totals' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['issue_date'] === null) {
            $invalidProperties[] = "'issue_date' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if (!is_null($this->container['external_reference']) && (mb_strlen($this->container['external_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_reference', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['correlation_document_id'] === null) {
            $invalidProperties[] = "'correlation_document_id' can't be null";
        }
        if ((mb_strlen($this->container['correlation_document_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'correlation_document_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['serie_external_key'] === null) {
            $invalidProperties[] = "'serie_external_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_period
     *
     * @return \Swagger\Client\Model\PeriodInputDto
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param \Swagger\Client\Model\PeriodInputDto $billing_period billing_period
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets delivery_terms
     *
     * @return \Swagger\Client\Model\DeliveryTermInputDto
     */
    public function getDeliveryTerms()
    {
        return $this->container['delivery_terms'];
    }

    /**
     * Sets delivery_terms
     *
     * @param \Swagger\Client\Model\DeliveryTermInputDto $delivery_terms delivery_terms
     *
     * @return $this
     */
    public function setDeliveryTerms($delivery_terms)
    {
        $this->container['delivery_terms'] = $delivery_terms;

        return $this;
    }

    /**
     * Gets withholding_tax_sub_totals
     *
     * @return \Swagger\Client\Model\WithholdingTaxSubTotalInputDto[]
     */
    public function getWithholdingTaxSubTotals()
    {
        return $this->container['withholding_tax_sub_totals'];
    }

    /**
     * Sets withholding_tax_sub_totals
     *
     * @param \Swagger\Client\Model\WithholdingTaxSubTotalInputDto[] $withholding_tax_sub_totals withholding_tax_sub_totals
     *
     * @return $this
     */
    public function setWithholdingTaxSubTotals($withholding_tax_sub_totals)
    {
        $this->container['withholding_tax_sub_totals'] = $withholding_tax_sub_totals;

        return $this;
    }

    /**
     * Gets withholding_tax_totals
     *
     * @return \Swagger\Client\Model\WithholdingTaxTotalInputDto[]
     */
    public function getWithholdingTaxTotals()
    {
        return $this->container['withholding_tax_totals'];
    }

    /**
     * Sets withholding_tax_totals
     *
     * @param \Swagger\Client\Model\WithholdingTaxTotalInputDto[] $withholding_tax_totals withholding_tax_totals
     *
     * @return $this
     */
    public function setWithholdingTaxTotals($withholding_tax_totals)
    {
        $this->container['withholding_tax_totals'] = $withholding_tax_totals;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets serie_prefix
     *
     * @return string
     */
    public function getSeriePrefix()
    {
        return $this->container['serie_prefix'];
    }

    /**
     * Sets serie_prefix
     *
     * @param string $serie_prefix serie_prefix
     *
     * @return $this
     */
    public function setSeriePrefix($serie_prefix)
    {
        $this->container['serie_prefix'] = $serie_prefix;

        return $this;
    }

    /**
     * Gets serie_number
     *
     * @return string
     */
    public function getSerieNumber()
    {
        return $this->container['serie_number'];
    }

    /**
     * Sets serie_number
     *
     * @param string $serie_number serie_number
     *
     * @return $this
     */
    public function setSerieNumber($serie_number)
    {
        $this->container['serie_number'] = $serie_number;

        return $this;
    }

    /**
     * Gets issuer_party
     *
     * @return \Swagger\Client\Model\IssuerPartyInputDto
     */
    public function getIssuerParty()
    {
        return $this->container['issuer_party'];
    }

    /**
     * Sets issuer_party
     *
     * @param \Swagger\Client\Model\IssuerPartyInputDto $issuer_party issuer_party
     *
     * @return $this
     */
    public function setIssuerParty($issuer_party)
    {
        $this->container['issuer_party'] = $issuer_party;

        return $this;
    }

    /**
     * Gets customer_party
     *
     * @return \Swagger\Client\Model\CustomerPartyInputDto
     */
    public function getCustomerParty()
    {
        return $this->container['customer_party'];
    }

    /**
     * Sets customer_party
     *
     * @param \Swagger\Client\Model\CustomerPartyInputDto $customer_party customer_party
     *
     * @return $this
     */
    public function setCustomerParty($customer_party)
    {
        $this->container['customer_party'] = $customer_party;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Swagger\Client\Model\LineInputDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Swagger\Client\Model\LineInputDto[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets tax_sub_totals
     *
     * @return \Swagger\Client\Model\TaxSubTotalInputDto[]
     */
    public function getTaxSubTotals()
    {
        return $this->container['tax_sub_totals'];
    }

    /**
     * Sets tax_sub_totals
     *
     * @param \Swagger\Client\Model\TaxSubTotalInputDto[] $tax_sub_totals tax_sub_totals
     *
     * @return $this
     */
    public function setTaxSubTotals($tax_sub_totals)
    {
        $this->container['tax_sub_totals'] = $tax_sub_totals;

        return $this;
    }

    /**
     * Gets tax_totals
     *
     * @return \Swagger\Client\Model\TaxTotalInputDto[]
     */
    public function getTaxTotals()
    {
        return $this->container['tax_totals'];
    }

    /**
     * Sets tax_totals
     *
     * @param \Swagger\Client\Model\TaxTotalInputDto[] $tax_totals tax_totals
     *
     * @return $this
     */
    public function setTaxTotals($tax_totals)
    {
        $this->container['tax_totals'] = $tax_totals;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \Swagger\Client\Model\LegalMonetaryTotalInputDto
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \Swagger\Client\Model\LegalMonetaryTotalInputDto $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param string $issue_date issue_date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference MaxLength: 50
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        if (!is_null($external_reference) && (mb_strlen($external_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_reference when calling SalesInvoiceInputDto., must be smaller than or equal to 50.');
        }

        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets correlation_document_id
     *
     * @return string
     */
    public function getCorrelationDocumentId()
    {
        return $this->container['correlation_document_id'];
    }

    /**
     * Sets correlation_document_id
     *
     * @param string $correlation_document_id MaxLength: 50
     *
     * @return $this
     */
    public function setCorrelationDocumentId($correlation_document_id)
    {
        if ((mb_strlen($correlation_document_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $correlation_document_id when calling SalesInvoiceInputDto., must be smaller than or equal to 50.');
        }

        $this->container['correlation_document_id'] = $correlation_document_id;

        return $this;
    }

    /**
     * Gets serie_external_key
     *
     * @return string
     */
    public function getSerieExternalKey()
    {
        return $this->container['serie_external_key'];
    }

    /**
     * Sets serie_external_key
     *
     * @param string $serie_external_key serie_external_key
     *
     * @return $this
     */
    public function setSerieExternalKey($serie_external_key)
    {
        $this->container['serie_external_key'] = $serie_external_key;

        return $this;
    }

    /**
     * Gets additional_notification_emails
     *
     * @return string[]
     */
    public function getAdditionalNotificationEmails()
    {
        return $this->container['additional_notification_emails'];
    }

    /**
     * Sets additional_notification_emails
     *
     * @param string[] $additional_notification_emails additional_notification_emails
     *
     * @return $this
     */
    public function setAdditionalNotificationEmails($additional_notification_emails)
    {
        $this->container['additional_notification_emails'] = $additional_notification_emails;

        return $this;
    }

    /**
     * Gets document_references
     *
     * @return \Swagger\Client\Model\DocumentReferenceInputDto[]
     */
    public function getDocumentReferences()
    {
        return $this->container['document_references'];
    }

    /**
     * Sets document_references
     *
     * @param \Swagger\Client\Model\DocumentReferenceInputDto[] $document_references document_references
     *
     * @return $this
     */
    public function setDocumentReferences($document_references)
    {
        $this->container['document_references'] = $document_references;

        return $this;
    }

    /**
     * Gets graphical_representation_custom_fields
     *
     * @return \Swagger\Client\Model\CustomFieldInputDto[]
     */
    public function getGraphicalRepresentationCustomFields()
    {
        return $this->container['graphical_representation_custom_fields'];
    }

    /**
     * Sets graphical_representation_custom_fields
     *
     * @param \Swagger\Client\Model\CustomFieldInputDto[] $graphical_representation_custom_fields graphical_representation_custom_fields
     *
     * @return $this
     */
    public function setGraphicalRepresentationCustomFields($graphical_representation_custom_fields)
    {
        $this->container['graphical_representation_custom_fields'] = $graphical_representation_custom_fields;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\DocumentAttachmentInputDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\DocumentAttachmentInputDto[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets pdf_data
     *
     * @return \Swagger\Client\Model\OutboundDocumentPdfInputDto
     */
    public function getPdfData()
    {
        return $this->container['pdf_data'];
    }

    /**
     * Sets pdf_data
     *
     * @param \Swagger\Client\Model\OutboundDocumentPdfInputDto $pdf_data (Updated DIAN 2 Property)
     *
     * @return $this
     */
    public function setPdfData($pdf_data)
    {
        $this->container['pdf_data'] = $pdf_data;

        return $this;
    }

    /**
     * Gets prepaid_payments
     *
     * @return \Swagger\Client\Model\PrepaidPaymentInputDto[]
     */
    public function getPrepaidPayments()
    {
        return $this->container['prepaid_payments'];
    }

    /**
     * Sets prepaid_payments
     *
     * @param \Swagger\Client\Model\PrepaidPaymentInputDto[] $prepaid_payments prepaid_payments
     *
     * @return $this
     */
    public function setPrepaidPayments($prepaid_payments)
    {
        $this->container['prepaid_payments'] = $prepaid_payments;

        return $this;
    }

    /**
     * Gets payment_exchange_rate
     *
     * @return \Swagger\Client\Model\PaymentExchangeRateInputDto
     */
    public function getPaymentExchangeRate()
    {
        return $this->container['payment_exchange_rate'];
    }

    /**
     * Sets payment_exchange_rate
     *
     * @param \Swagger\Client\Model\PaymentExchangeRateInputDto $payment_exchange_rate payment_exchange_rate
     *
     * @return $this
     */
    public function setPaymentExchangeRate($payment_exchange_rate)
    {
        $this->container['payment_exchange_rate'] = $payment_exchange_rate;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \Swagger\Client\Model\PaymentMeanInputDto[]
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param \Swagger\Client\Model\PaymentMeanInputDto[] $payment_means payment_means
     *
     * @return $this
     */
    public function setPaymentMeans($payment_means)
    {
        $this->container['payment_means'] = $payment_means;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \Swagger\Client\Model\PaymentTermInputDto[]
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \Swagger\Client\Model\PaymentTermInputDto[] $payment_terms payment_terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets allowance_charges
     *
     * @return \Swagger\Client\Model\AllowanceChargeInputDto[]
     */
    public function getAllowanceCharges()
    {
        return $this->container['allowance_charges'];
    }

    /**
     * Sets allowance_charges
     *
     * @param \Swagger\Client\Model\AllowanceChargeInputDto[] $allowance_charges allowance_charges
     *
     * @return $this
     */
    public function setAllowanceCharges($allowance_charges)
    {
        $this->container['allowance_charges'] = $allowance_charges;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string $operation_type (New DIAN 2 Property)
     *
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


